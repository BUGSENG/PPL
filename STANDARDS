
Coding Standards for the Parma Polyhedra Library
================================================

Length of source lines
----------------------

Avoid source lines longer than 78 characters.


Block closures
--------------

Try to make clear what is being closed.  For example:

1)

namespace Parma_Polyhedra_Library {

...

} // namespace Parma_Polyhedra_Library

2)

extern "C" {

...

} // extern "C"

3)

#ifndef _Class_defs_hh

...

#endif // !defined(_Class_defs_hh)


Namespace indentation
---------------------

The entire library is in its own namespace.  We sometimes specialize
std::swap() and std::swap_iter().  No other namespaces are involved.
Therefore, we have unindented namespace-level declarations, thus
saving some precious horizontal space.  For example:

namespace Parma_Polyhedra_Library {

non-empty lines here start at column 0;

} // namespace Parma_Polyhedra_Library

If you use emacs the following two lines may interest you:

;; Disable indentation when in namespace blocks.
(c-set-offset 'innamespace 0)


Standards for Documenting the Project with Doxygen
==================================================

1) All code entities (classes, structs, enums, variables, methods,
   functions, etc.) should be provided with a brief Doxygen comment.
   Brief comments are obtained as follows:

     //! Brief comment for class C.
     class C {
       ....

   or, if the comment is multi-line, as follows:

     //! \brief
     //! A brief comment for class C, that is a bit too long
     //! to be placed in a single line.
     class C {
       ....

2) When needed or useful, brief comments should be followed
   by detailed Doxygen comments.

     //! Brief comment for class C.
     /*!
	More details on class C.
	Even more details.
     */
     class C {
       ....

   In the produced documentation, the brief comment will be
   automatically repeated just before the detailed comment,
   so that bare repetitions should be avoided.

3) In the source files, detailed comments should be placed
   immediately after the brief ones, so that ALL the documentation
   pertinent to a code entity is kept in a single file
   (typically, the *.defs.hh file).

3) Brief Doxygen comments should be brief (indeed).
   If more than two lines are required, then the comment should be
   split into a brief part and a detailed part.
   Note that, starting from Doxygen 1.2.16, all the uses of \param,
   \result and \exception special commands will automatically turn
   the brief comment into a detailed one (even if the special command
   \brief is used).

4) Code entities or details that should not be visible by the end-user
   (but that are useful for the developers) should be surrounded by

     #ifdef PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS
	// ... doxygen comments ...
     #endif // PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS

   so that they will only appear in the developer's reference.
   Note that the above preprocessing flags are not necessary
   (and should therefore be avoided) when documenting:
    - a private member of a class (because private members never
      appear in the user manual);
    - a public member of a class that is NOT documented
      (because even the documented members of an undocumented
       class are automatically filtered out of the user manual).

5) The documentation of those functions that are neither methods
   nor friends of a given class, but are related in some way to that
   class, should be made part of the documentation of the class.
   This is obtained by using the Doxygen \relates special command
   as follows:

     /*! \relates <classname> */

   It seems that, in order to correctly match function declarations
   and definitions, the above command should be placed in both places.
   Typically, this will be the only kind of Doxygen command
   occurring in *.inlines.hh and *.cc source files.
