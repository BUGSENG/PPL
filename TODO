Enhancements for PPL 0.8
========================

- Reduce the number of FIXMEs to no more than 40.
- Check and update the links in the CREDITS file.
- Improve the documentation about shared libraries.
  See http://www.cs.unipr.it/pipermail/ppl-devel/2005-July/006178.html.
- Improve the documentation of Polyhedron::shrink_bounding_box().
  See http://www.cs.unipr.it/pipermail/ppl-devel/2005-July/006191.html.
- The documentation for the SWI-Prolog interface claims that initialization
  of the library is automatic: some tests conducted with SWI-Prolog 5.4.4
  seem to indicate otherwise.
- The new mechanism used to build the ppl_install.hh header file
  depends on the availability of PERL.  Consider whether this
  is a new requirement we impose to the user or not (it certainly
  is not a new requirement for the developer).  In case it is, and
  in case we decide we don't want this extra requirement, change
  the building procedure so that the header file is built at
  distribution-time and needs not be rebuilt at installation-time.
- Add our implementation of bounded difference shapes.
- Decide which interfaces should be provided for the simplex method,
  write them, and write the documentation for them.
- The Powerset class implementation is still poorly documented.
- Consider renaming Powerset::meet_assign().
- Clearly explain, in the documentation, how (not) to use
  set_GMP_memory_allocation_functions().  More generally, explain how
  to have memory-guarded computations.
- The check_containment() function is not officially available to
  the PPL user.  However, someone uses it and, apparently, this
  comes in handy.  See how to provide the same functionality the
  right way.
- Reconsider the handling of temporary coefficients.
- In the Prolog interface there are predicates such as
  ppl_Polyhedron_remove_space_dimensions/2 that require an input list;
  if the argument is not a list, in the current version, the call to
  this predicate will fail. This needs to be changed so that an
  exception is thrown.
- In the Prolog interface, reconsider the functionality and names of the
  "with_token" predicates.
- The documentation has been read through but a more careful check,
  particularly on the detailed descriptions, should be done.

Enhancements for PPL 0.9
========================

- Incorporate the domain of rational grids.
- Provide a single, generic implementation to replace all our status
  classes.

Enhancements for PPL 0.9 or later versions
==========================================

- Implement void Polyhedron::envelope_assign(const Polyhedron& y).
- Implement the extrapolation operators defined in HenzingerH95
  and HenzingerPW01.
- See whether, using the techniques described in
  ftp://ftp.ifor.math.ethz.ch/pub/fukuda/reports/polyunion001120.ps.gz
  we can implement bool poly_hull_assign_if_exact(PH& p, const PH& q),
  temporarily in algorithms.hh, more efficiently.
- Provide optimized implementations of Polyhedron::expand_dimension()
  Polyhedron::fold_dimensions().


Constructions on Polyhedra
==========================

Since version 0.6, the PPL supports the determinate and powerset
constructions of the constraint system hierarchy described in

  R. Bagnara.
  A hierarchy of constraint systems for data-flow analysis
  of constraint logic-based languages.
  Science of Computer Programming 30, 1-2 (January 1998), pp. 119-155.
  Available at http://www.cs.unipr.it/~bagnara/Papers/Abstracts/SCP98

The implementation consists in a generic implementation (in the form
of C++ templates) of the hierarchy, plus a specialization of the
powerset construction on polyhedra.  What is missing now is the
ask-and-tell construction.  We have some old code implementing it
but it requires extensive work.


Efficiency Issues
=================

- There must be a more efficient way to implement
  bool Polyhedron::is_disjoint_from(const Polyhedron&).

- There must be a more efficient way to compute convex
  differences.

- We are being rather careless about the creation of temporaries
  as far as the classes Linear_Expression, Constraint and Generator
  are concerned.

- In Polyhedron::strongly_minimize_constraints(), after the removal
  of eps-redundant constraints, find an efficient way to test whether
  or not the eps_leq_one constraint is needed to obtain an upper bound
  on the epsilon dimension.


Cutting-Plane Methods
=====================

Suppose we are only interested in integral solutions (as is the
case, e.g., in most termination analyses).  Then cutting-plane methods
(Gomory, Chvátal, ...) allow to shrink polyhedra still not losing any
integral solution.
See http://www.cs.unipr.it/ppl/Documentation/bibliography#NemhauserW88


Z-Polyhedra
===========

We plan to extend the PPL to deal with Z-polyhedra [Ancourt91th].
Z-polyhedra are intersections and other representations for discrete sets.

  C. Ancourt.
  Génération automatique de codes de transfert pour
  multiprocesseurs à mémoires locales.
  PhD thesis, Université de Paris VI, March 1991.
