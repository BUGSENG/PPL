Enhancements for PPL 0.8
========================

- The Powerset class implementation is still poorly documented.


Enhancements for PPL 0.9
========================

- Reduce the number of FIXMEs to no more than 20.
- Incorporate the domain of rational grids.
- Incorporate the domain of intervals.
- Provide a single, generic implementation to replace all our status
  classes.
- Clearly explain, in the documentation, how (not) to use
  set_GMP_memory_allocation_functions().  More generally, explain how
  to have memory-guarded computations.
- Reconsider the handling of temporary coefficients.
- Provide a generic implementation for the `widening with tokens'.

Enhancements for PPL 0.9 or later versions
==========================================

- Implement void Polyhedron::envelope_assign(const Polyhedron& y).
- Implement the extrapolation operators defined in HenzingerH95
  and HenzingerPW01.
- See whether, using the techniques described in
  ftp://ftp.ifor.math.ethz.ch/pub/fukuda/reports/polyunion001120.ps.gz
  we can implement bool poly_hull_assign_if_exact(PH& p, const PH& q),
  temporarily in algorithms.hh, more efficiently.
- Provide optimized implementations of Polyhedron::expand_dimension()
  Polyhedron::fold_dimensions().
- Experiment with different compilation flags, such as GCC's
  `-fno-threadsafe-statics'.

Constructions on Polyhedra
==========================

Since version 0.6, the PPL supports the determinate and powerset
constructions of the constraint system hierarchy described in

  R. Bagnara.
  A hierarchy of constraint systems for data-flow analysis
  of constraint logic-based languages.
  Science of Computer Programming 30, 1-2 (January 1998), pp. 119-155.
  Available at http://www.cs.unipr.it/~bagnara/Papers/Abstracts/SCP98

The implementation consists in a generic implementation (in the form
of C++ templates) of the hierarchy, plus a specialization of the
powerset construction on polyhedra.  What is missing now is the
ask-and-tell construction.  We have some old code implementing it
but it requires extensive work.


Efficiency Issues
=================

- There must be a more efficient way to implement
  bool Polyhedron::is_disjoint_from(const Polyhedron&).

- There must be a more efficient way to compute convex
  differences.

- We are being rather careless about the creation of temporaries
  as far as the classes Linear_Expression, Constraint and Generator
  are concerned.


Cutting-Plane Methods
=====================

Suppose we are only interested in integral solutions (as is the
case, e.g., in most termination analyses).  Then cutting-plane methods
(Gomory, Chvátal, ...) allow to shrink polyhedra still not losing any
integral solution.
See http://www.cs.unipr.it/ppl/Documentation/bibliography#NemhauserW88


Z-Polyhedra
===========

We plan to extend the PPL to deal with Z-polyhedra [Ancourt91th].
Z-polyhedra are intersections and other representations for discrete sets.

  C. Ancourt.
  Génération automatique de codes de transfert pour
  multiprocesseurs à mémoires locales.
  PhD thesis, Université de Paris VI, March 1991.


Debian packaging
================

- Add an interface package for each Prolog as a suitable version of
  that Prolog appears in Debian.  Control entries for these are in
  control.prologs.

- Find out if /usr/lib/pkgconfig entries are required in any packages.

- libppl-dev is very large.  Consider moving the docs to libppl-doc
  and the other files into libppl.

- Verify the Build-Depends and Build-Depends-Indep settings, as per
  the Debian Developers Reference section 5.10.1 point 1.

- Consider renaming libppl-pwl to libpwl.
