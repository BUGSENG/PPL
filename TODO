Enhancements for PPL 0.6
========================

- We must explain very well that iterators can be invalidated by several
  (actually, almost all) operations, and that use of an invalidated
  iterator causes undefined behavior.
- Implement the extrapolation operators defined in HenzingerH95
  and HenzingerPW01.
- Complete the Determinate and PowerSet classes so as to provide
  complete support for sets of polyhedra.
- See whether, using the techniques described in 
  ftp://ftp.ifor.math.ethz.ch/pub/fukuda/reports/polyunion001120.ps.gz
  we can implement bool poly_hull_assign_if_exact(PH& p, const PH& q),
  tomporarily in algorithms.hh, more efficiently.
- Harmonize all the methods void PPL::Polyhedron::throw_...().


Constructions on Polyhedra
==========================

We want to extend the PPL so as to implement the constructions
of the constraint system hierarchy described in

  R. Bagnara.
  A hierarchy of constraint systems for data-flow analysis
  of constraint logic-based languages.
  Science of Computer Programming 30, 1-2 (January 1998), pp. 119-155.
  Available at http://www.cs.unipr.it/~bagnara/Papers/Abstracts/SCP98

A generic implementation (in the form of C++ templates) of the entire
hierarchy has already been written.  The wrapper class for C_Polyhedron
and NNC_Polyhedron so that a polyhedron is seen as a "determinate
constraint system" is almost finished, as is the implementation of
powersets of polyhedra.  Ask-and-tell systems need extensive work.


Efficiency Issues
=================

- There must be a more efficient way to implement
  bool Polyhedron::is_disjoint_from(const Polyhedron&).

- There must be a more efficient way to compute convex
  differences.

- We are being rather careless about the creation of temporaries
  as far as the classes LinExpression, Constraint and Generator
  are concerned.

- In Polyhedron::strongly_minimize_constraints(), after the removal
  of eps-redundant constraints, find an efficient way to test whether
  or not the eps_leq_one constraint is needed to obtain an upper bound
  on the epsilon dimension.


Cutting-Plane Methods
=====================

Suppose we are only interested in integral solutions (as is the
case, e.g., in most termination analyses).  Then cutting-plane methods
(Gomory, Chvátal, ...) allow to shrink polyhedra still not losing any
integral solution.
See http://www.cs.unipr.it/ppl/Documentation/bibliography#NemhauserW88


Z-Polyhedra
===========

We plan to extend the PPL to deal with Z-polyhedra [Ancourt91th].
Z-polyhedra are intersections and other representations for discrete sets.

  C. Ancourt.
  Génération automatique de codes de transfert pour
  multiprocesseurs à mémoires locales.
  PhD thesis, Université de Paris VI, March 1991.
