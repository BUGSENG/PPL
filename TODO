To be Done Just After Merging the Strict Branch
===============================================

1) Make sure all the *_and_minimize methods that
   can result in an empty polyhedron return a boolean
   (true if the result is non-empty, false otherwise).

6) Rename Polyhedron::insert(const Constraint&)
   to Polyhedron::add_constraint(const Constraint&).
   Likewise, rename Polyhedron::insert(const Generator&)
   to Polyhedron::add_generator(const Generator&).


Minor and Not So Minor Things
=============================

- Make sure all the public methods of Polyhedron are
  available through the Prolog interfaces.  And properly
  documented there.  (By the way, the documentation of
  ppl_copy_polyhedron is wrong.)  It would be nice not
  to require the user of the Prolog interface to read
  also all the C++ documentation.  We should really put
  ourselves in the shoes of a _user_.

- Seriously look at all the warnings issued by Doxygen
  when it produces the developer's reference manual.
  All of these should either result in the discovery
  of bugs (either in Doxygen or in our code) or in
  misuses of Doxygen on our part.

- There must be a more efficient way to compute convex
  differences.

- We still are not providing all the services we ought
  to provide.  For instance:

  1) Bounding box: obtaining the smallest bounding box
     (a polyhedron with the sides parallel to the axes)
     containing a given convex polyhedron.  For this
     to be really useful an appropriate user interface
     should also be devised.  The typical use is reverting
     from a polyhedra-based analysis to an interval-based
     one.  This method gives an interval for each dimension.

  2) Cutting-plane methods?  Suppose we are only interested
     in integral solutions.  Then cutting-plane methods
     (Gomory, Chvátal, ...) allow to shrink P still not losing
     any integral solution.  See
     http://www.cs.unipr.it/ppl/Documentation/bibliography#NemhauserW88


Non-Necessarily-Closed Polyhedra
================================

We would like to support the library so as to deal with
NNC polyhedra, i.e., polyhedra that can be expressed
as the intersection of hyperspaces that need not be closed.
This is work in progress and we hope to include it in
release 0.4 of the Parma Polyhedra Library.


Z-Polyhedra
===========

We plan to extend the PPL to deal with Z-polyhedra [Ancourt91th].
Z-polyhedra are intersections and other representations for discrete sets.

  C. Ancourt.
  Génération automatique de codes de transfert pour
  multiprocesseurs à mémoires locales.
  PhD thesis, Université de Paris VI, March 1991.



Design and Implementation of Strict Weak Orderings
==================================================

Let S be a set and r be any binary relation over S.
The relation r=, called "r-equivalence" is defined as follows,
for each x and y in S:

    r=(x, y) iff  (not r(x, y)) and (not r(y, x)).

The relation r is a "strict weak ordering" (swo)
if and only if

1) r is irreflexive, i.e., r(x, x) is false for each x in S;
2) r is antisymmetric, i.e., r(x, y) implies not r(y, x);
3) r is transitive;
4) r= is also transitive.

Note that a "total" ordering is a strict weak ordering where
r-equivalence is equality.

In order to have associative containers of PPL polyhedra (such as sets
and maps of polyhedra) we need a strict weak ordering over them.
Actually it would be interesting, if at all possible, to define more
than one.  That is

- a fast to compute swo with no additional features;
- a total swo;
- a (total) swo that extends set-theoretic inclusion, that is,
  x < y (x is strictly contained in y) implies r(x, y)
  for each polyhedra x and y.


Constructions on Polyhedra
==========================

We want to extend the PPL so as to implement the constructions
of the constraint system hierarchy described in

  R. Bagnara.
  A hierarchy of constraint systems for data-flow analysis
  of constraint logic-based languages.
  Science of Computer Programming 30, 1-2 (January 1998), pp. 119-155.
  Available at http://www.cs.unipr.it/~bagnara/Papers/Abstracts/SCP98

A generic implementation (in the form of C++ templates) of the entire
hierarchy has already been written.  What is missing is:

1) a wrapper class for PPL::Polyhedron so that a polyhedron is seen
   as a "determinate constraint system";
2) one or more strict weak ordering on polyhedra;
3) extending the above mentioned templates so as to work also with
   ordinary swos (the current implementation only supports total swos
   that extend entailment).  This should be done by extending the
   functionalities of the templates so that they can still exploit
   the features of more powerful swos.
