Urgent Things
=============

- Check why we have Matrix::set_sorted(bool value) and
  Matrix::set_necessarily_closed() and set_not_necessarily_closed().

- Fix the comments of the following methods of Matrix:
  void grow(dimension_type new_n_rows, dimension_type new_n_columns);
  void resize_no_copy(dimension_type new_n_rows,
  void add_rows_and_columns(dimension_type n).

- Make sure all the functionalities are available in all interfaces.
- Check the documentation for Polyhedron::rename_dimensions() and
  its wrappers for all the interfaces.
- Document the classes: ExtendedRational, Boundary, LBoundary, UBoundary.
- Finish updating the NEWS file.

Efficiency Issues
=================

- There must be a more efficient way to implement
  bool check_disjoint(const Polyhedron&, const Polyhedron&).

- There must be a more efficient way to compute convex
  differences.

- We are being rather careless about the creation of temporaries
  as far as the classes LinExpression, Constraint and Generator
  are concerned.

- In Polyhedron::strongly_minimize_constraints(), after the removal
  of eps-redundant constraints, find an efficient way to test whether
  or not the eps_leq_one constraint is needed to obtain an upper bound
  on the epsilon dimension.

Cutting-Plane Methods
=====================

Suppose we are only interested in integral solutions (as is the
case, e.g., in most termination analyses).  Then cutting-plane methods
(Gomory, Chvátal, ...) allow to shrink P still not losing any integral
solution.
See http://www.cs.unipr.it/ppl/Documentation/bibliography#NemhauserW88


Z-Polyhedra
===========

We plan to extend the PPL to deal with Z-polyhedra [Ancourt91th].
Z-polyhedra are intersections and other representations for discrete sets.

  C. Ancourt.
  Génération automatique de codes de transfert pour
  multiprocesseurs à mémoires locales.
  PhD thesis, Université de Paris VI, March 1991.


Design and Implementation of Strict Weak Orderings
==================================================

Let S be a set and r be any binary relation over S.
The relation r=, called "r-equivalence" is defined as follows,
for each x and y in S:

    r=(x, y) iff  (not r(x, y)) and (not r(y, x)).

The relation r is a "strict weak ordering" (swo)
if and only if

1) r is irreflexive, i.e., r(x, x) is false for each x in S;
2) r is antisymmetric, i.e., r(x, y) implies not r(y, x);
3) r is transitive;
4) r= is also transitive.

Note that a "total" ordering is a strict weak ordering where
r-equivalence is equality.

In order to have associative containers of PPL polyhedra (such as sets
and maps of polyhedra) we need a strict weak ordering over them.
Actually it would be interesting, if at all possible, to define more
than one.  That is

- a fast to compute swo with no additional features;
- a total swo;
- a (total) swo that extends set-theoretic inclusion, that is,
  x < y (x is strictly contained in y) implies r(x, y)
  for each polyhedra x and y.


Constructions on Polyhedra
==========================

We want to extend the PPL so as to implement the constructions
of the constraint system hierarchy described in

  R. Bagnara.
  A hierarchy of constraint systems for data-flow analysis
  of constraint logic-based languages.
  Science of Computer Programming 30, 1-2 (January 1998), pp. 119-155.
  Available at http://www.cs.unipr.it/~bagnara/Papers/Abstracts/SCP98

A generic implementation (in the form of C++ templates) of the entire
hierarchy has already been written.  What is missing is:

1) wrapper classes for PPL::C_Polyhedron and PPL::NNC_Polyhedron
   so that a polyhedron is seen as a "determinate constraint system";
2) one or more strict weak ordering on polyhedra;
3) extending the above mentioned templates so as to work also with
   ordinary swos (the current implementation only supports total swos
   that extend entailment).  This should be done by extending the
   functionalities of the templates so that they can still exploit
   the features of more powerful swos.
