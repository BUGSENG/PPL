/* Test number input.
   Copyright (C) 2001-2005 Roberto Bagnara <bagnara@cs.unipr.it>

This file is part of the Parma Polyhedra Library (PPL).

The PPL is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

The PPL is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02111-1307, USA.

For the most up-to-date information see the Parma Polyhedra Library
site: http://www.cs.unipr.it/ppl/ . */

#include "ppl_test.hh"
#include <string>
#include <sstream>
#include <cstdlib>

using std::string;
using std::stringstream;

using namespace Parma_Polyhedra_Library::IO_Operators;
using namespace Parma_Polyhedra_Library::Checked;

// Adds slow, memory-heavy large exponent tests.
//#define TEST_LARGE_EXPONENTS

#ifdef TEST_LARGE_EXPONENTS
#include <sys/resource.h>
#endif

int ret;

struct Test_Extended_Number_Policy {
  static const int check_overflow = 1;
  static const int check_inf_add_inf = 0;
  static const int check_inf_sub_inf = 0;
  static const int check_inf_mul_zero = 0;
  static const int check_div_zero = 0;
  static const int check_inf_div_inf = 0;
  static const int check_inf_mod = 0;
  static const int check_sqrt_neg = 0;
  static const int store_nan = 1;
  static const int store_infinity = 1;
  static const int fpu_check_inexact = 0;
  static const int check_nan_args = 1;
  static const Rounding_Dir ROUND_DEFAULT = ROUND_UP;
  static void handle_result(Result r);
};

inline void
Test_Extended_Number_Policy::handle_result(Result r) {
  if (r == VC_NAN)
    return;
  Extended_Number_Policy::handle_result(r);
}

void
test(string number, string expected, string expected_residual,
     Result expected_result) {
  stringstream f(number);

  // Convert `number' to checked number q1.
  Checked_Number<mpq_class, Test_Extended_Number_Policy> q1;
  Result result = input(q1, f, ROUND_UP);
  typedef stringstream::char_type CH;
  CH* residual = (CH*) calloc(f.rdbuf()->in_avail(), sizeof(CH));
  if (residual == NULL) {
    nout << "Failed to allocate `residual'." << endl;
    exit(1);
  }
  f.readsome(residual, f.rdbuf()->in_avail());

  // Read q2 from string output of q1.
  stringstream ss1;
  ss1 << q1;
  Checked_Number<mpq_class, Test_Extended_Number_Policy> q2;
  Result r = input(q2, ss1, ROUND_UP);
  if (r != expected_result) {
#if 1 || NOISY
    using std::cout;
    cout << "Failed to read back `q2'.";
    cout << endl
	 << "r = " << r << ", q1 = " << q1
	 << endl
	 << "number = \"" << number
	 << "\", expected = \"" << expected << "\""
	 << endl
	 <<  "expected_residual = \"" << expected_residual
	 << "\", expected_result = " << expected_result << "\""
	 << endl;
#endif
    //exit(1);
  }

  // Check for a residual.
  CH* resid = (CH*) calloc(ss1.rdbuf()->in_avail(), sizeof(CH));
  if (resid == NULL) {
    nout << "Failed to allocate `resid'." << endl;
    free(residual);
    exit(1);
  }
  ss1.readsome(resid, ss1.rdbuf()->in_avail());
  if (string("").compare(resid)) {
    nout << "Residual left after reading q1 output into q2 (\""
	 << resid << "\")." << endl
	 << "q1: " << q1 << endl
	 << "q2: " << q2 << endl;
  error:
    nout << "given string: \"" << f.str() << "\""
	 << ", value parsed: \"" << q1 << "\""
	 << endl;
    ret = 1;
    free(resid);
    free(residual);
    return;
  }

  // Check that q1 equals q2.
  if (!(is_not_a_number(q1) && is_not_a_number(q2))
      && q1 != q2) {
    nout << "q1 should equal q2 (which was created from q1 output)."
	 << endl;
    goto error;
  }

  // Compare the output of q2 and the expected string.
  stringstream ss2;
  ss2 << q2;
  if (ss2.str().compare(expected)) {
    nout << "q2 output is \"" << ss2.str()
	 << "\" (expected \"" << expected << "\")."
	 << endl
	 << "q2: " << q2 << endl;
    goto error;
  }

  // Compare residual from initial convertion to expected residual.
  if (expected_residual.compare(residual)) {
    nout << "Residual from conversion: \"" << residual
	 << "\" (expected \"" << expected_residual << "\")" << endl;
    goto error;
  }

  // Compare result of initial conversion and expected result.
  if (result == expected_result) {
    free(resid);
    free(residual);
    return;
  }

  nout << "Result from conversion: " << result
       << " (expected " << expected_result << ")" << endl;

  goto error;
}

inline void
test_symbols() {

  test("inf", "+inf", "", V_EQ);
  test("InF", "+inf", "", V_EQ);    // FIX capatilise first n
  test("+inF", "+inf", "", V_EQ);
  test("-InF", "-inf", "", V_EQ);
  test("-InFinity", "-inf", "inity", V_EQ);
  test("Inf7", "+inf", "7", V_EQ);

  test("nan", "nan", "", VC_NAN);
  test("NAN", "nan", "", VC_NAN);
  test("Nan", "nan", "", VC_NAN);

  // Trailing input.

  test("nAn+", "nan", "+", VC_NAN);
  test("naN/", "nan", "/", VC_NAN);
  test("nAN/0", "nan", "/0", VC_NAN);
  test("nAN/-3", "nan", "/-3", VC_NAN);

  test("inF/3", "+inf", "/3", V_EQ);   // FIX capatilise first n
  test("Inf/-3", "+inf", "/-3", V_EQ); // FIX capatilise first n
  test("-inf/-3", "-inf", "/-3", V_EQ);

  // Errors.

  test("-NAn", "nan", "NAn", V_CVT_STR_UNK);
}

inline void
test_integers() {

  test("  -  2", "nan", "  2", V_CVT_STR_UNK);
  test("15", "15", "", V_EQ);
  test("34976098", "34976098", "", V_EQ);
  test("34976098349760983497609834976098",
       "34976098349760983497609834976098", "", V_EQ);
  test("3/-inf", "nan", "", V_CVT_STR_UNK);
  test("+77", "77", "", V_EQ);
  test("-77", "-77", "", V_EQ);
  test("-7777777777777777777777777",
       "-7777777777777777777777777", "", V_EQ);
  test("-77 ", "-77", " ", V_EQ);
  test("-77   ", "-77", "   ", V_EQ);
  test("-77ab", "-77", "ab", V_EQ);
  test("-77,33", "-77", ",33", V_EQ);
  test(" -  2", "nan", "  2", V_CVT_STR_UNK);

  // Fraction.
  test("71.3", "713/10", "", V_EQ);
  test("0.123456", "1929/15625", "", V_EQ);
  test("12345678910111213141516.12345678910111213141516",
       "308641972752780328537903086419727527803285379/25000000000000000000000",
       "", V_EQ);
  test("0.123456 101", "1929/15625", " 101", V_EQ);
  test("0.123456   101", "1929/15625", "   101", V_EQ);
  test("0.123456     ", "1929/15625", "     ", V_EQ);
  test(".333", "nan", ".333", V_CVT_STR_UNK);

  // Exponent.
  test("15e1", "150", "", V_EQ);
  test("15*^8", "1500000000", "", V_EQ);
  test("1*^009", "1000000000", "", V_EQ);
  test("15*^111",
       "15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
       "", V_EQ);
  test("151515e+1", "1515150", "", V_EQ);
  test("151515151515151515e+1", "1515151515151515150", "", V_EQ);
  test("9200e-2", "92", "", V_EQ);
  test("15*^7e4", "150000000", "e4", V_EQ);
  test("15*^6/", "nan", "", V_CVT_STR_UNK);
  test("9200e", "nan", "", V_CVT_STR_UNK);
  test("9200ea", "nan", "a", V_CVT_STR_UNK);
  test("9200*^", "nan", "", V_CVT_STR_UNK);
  test("9200*^b", "nan", "b", V_CVT_STR_UNK);
  // Exponent size limit.
  stringstream ss;
  ss << "1e" << (LONG_MAX / 10) + 1 << "0";
  test(ss.str(), "nan", "", V_CVT_STR_UNK);
  stringstream ss2;
  ss2 << "1e" << (LONG_MAX / 10) << (LONG_MAX % 10) + 1;
  test(ss2.str(), "nan", "", V_CVT_STR_UNK);
#ifdef TEST_LARGE_EXPONENTS
  stringstream ss3;
  ss3 << "1e" << (LONG_MAX / 10) << (LONG_MAX % 10);
  test(ss3.str(), "nan", "10[...]0", V_CVT_STR_UNK);
#endif

  // Exponent and fraction.
  test("5.3e3", "5300", "", V_EQ);
  test("2.2e-1", "11/50", "", V_EQ);
  test("7.e", "nan", "e", V_CVT_STR_UNK);
  test("7.0 e3", "7", " e3", V_EQ);
}

inline void
test_hexadecimals() {

  test("0x", "0", "", V_EQ);	// FIX "nan", "", V_CVT_STR_UNK
  test("0xx", "0", "x", V_EQ);	// FIX "nan", "x", V_CVT_STR_UNK
  test("0x0.f", "15/16", "", V_EQ);
  test("0x.f", "15/16", "", V_EQ); // FIX "nan", ".f", V_CVT_STR_UNK
  test("0x.f*^1", "15", "", V_EQ); // FIX "nan", ".f*^1", V_CVT_STR_UNK
  test("0x-f", "0", "-f", V_EQ);   // FIX "nan", "-f", V_CVT_STR_UNK
  test("0xfa", "250", "", V_EQ);
  test("-0xfa", "-250", "", V_EQ);
  test("-0x000000000000000000000000fa", "-250", "", V_EQ);
  test("-0xfaz", "-250", "z", V_EQ);
  test("-0xfa .", "-250", " .", V_EQ);
  test("0xfa0xfa", "4000", "xfa", V_EQ);

  // Fraction.
  test("0xfa.a", "2005/8", "", V_EQ);
  test("0xfa.ay", "2005/8", "y", V_EQ);
  test("-0xfa.", "nan", "", V_CVT_STR_UNK);

  // Exponent.
  test("0x1e2", "482", "", V_EQ);
  test("0x1*^2", "256", "", V_EQ);
  test("0x1*^2-1", "256", "-1", V_EQ);

  // Fraction and exponent.
  test("0x0.1*^3", "256", "", V_EQ);
  test("-0x29382a093589c501594f729e672567.2f09f342582b4598*^-2",
       "-493504168323155221903720496056512238754896365637429427/590295810358705651712",
       "", V_EQ);
  test("-0x29382a093589c501594f729e672567.2f09f342582b4598*^-20b",
       "-493504168323155221903720496056512238754896365637429427/1310933508604055428645639323137378916605714125627786059833620428064344929699983798856350724770249351343264006014785110634052203016928447702417826694914166499203532724061309761600565421336997063991815557515680099256435208755020866043671114406449028627331696698190741203965924596719013282704476143226108174949247429837123641776308586821274746853953307040976937411766310985422056170406984474085761281737469468808976890729698039324009144871950806544374270234375377739131156048222163582026729343976248181187638137223873724172759146299690233903325378612205820465841687984250694283465351797146791878992198286281436600229186585471120819282194789204326612992",
       "", V_EQ);
#ifdef TEST_LARGE_EXPONENTS
  test("-0x29382a093589c501594f729e672567.2f09f342582b4598*^-20b3029",
       "256", "", V_EQ);
#endif
  test("0x0.1*^3   -0", "256", "   -0", V_EQ);
}

inline void
test_bases() {

  test("3^^", "0", "", V_EQ);	// FIX "nan", "", V_CVT_STR_UNK
  test("3^^z", "0", "z", V_EQ);	// FIX "nan", "z", V_CVT_STR_UNK
  test("^^3", "nan", "^^3", V_CVT_STR_UNK);
  test("3^^1", "1", "", V_EQ);
  test("2^^0", "0", "", V_EQ);
  test("2^^1", "1", "", V_EQ);
  test("2^^10", "2", "", V_EQ);
  test("2^^11", "3", "", V_EQ);
  test("36^^z", "35", "", V_EQ);
  test("36^^yz", "1259", "", V_EQ);
  test("36^^xyz", "44027", "", V_EQ);
  test("37^^2", "nan", "^2", V_CVT_STR_UNK);
  test("37^^1.1", "nan", "^1.1", V_CVT_STR_UNK);
  test("2^^113", "3", "3", V_EQ);
  test("2^^11 3", "3", " 3", V_EQ);
  test("3^^e2", "0", "", V_EQ); // FIX "nan", "e2", V_CVT_STR_UNK

  // Fraction.
  test("2^^11.1", "7/2", "", V_EQ);
  test("2^^11.1a", "7/2", "a", V_EQ);
  test("2^^11.1.", "7/2", ".", V_EQ);
  test("2^^11.1   ", "7/2", "   ", V_EQ);

  // Exponent.
  test("10^^2e3", "2000", "", V_EQ);
  test("8^^2e3", "1024", "", V_EQ);
  test("8^^2e38", "1024", "8", V_EQ);
  test("8^^2e3e", "1024", "e", V_EQ);

  // Fraction and exponent.
  test("8^^2.1e3", "1088", "", V_EQ);
  test("8^^20402543.120347e7", "9073863231288", "", V_EQ);
  test("8^^2.18e3", "17/8", "8e3", V_EQ);
}

inline void
test_denominators() {

  test("15/0", "nan", "", VC_NAN);
  test("15/1", "15", "", V_EQ);
  test("15/3", "5", "", V_EQ);
  test("15/-3", "-5", "", V_EQ); // FIX "nan", "-3", V_CVT_STR_UNK
  test("15/3f", "5", "f", V_EQ);

  // Exponent.
  test("15/30e-1", "5", "", V_EQ);
  test("27e3/30e-1", "9000", "", V_EQ);
  test("15/30e-1,2", "5", ",2", V_EQ);
  test("15/30e-1.2", "5", ".2", V_EQ);

  // Fraction.
  test("27.9/3.1", "9", "", V_EQ);
  test("27.9/3.1=9", "9", "=9", V_EQ);

  // Exponent and fraction.
  test("27.9e3/30e-1", "9300", "", V_EQ);
  test("27.9e3/30e-1/2", "9300", "/2", V_EQ);
  test("27.9e3/30e-1^^", "9300", "^^", V_EQ);

  // Hexadecimal.
  test("0xf/0x3", "5", "", V_EQ);
  test("3048227.23429e3/0x230abc43",
       "304822723429/58790611500", "", V_EQ);
  test("0xf/0x3g", "5", "g", V_EQ);

  // Base.
  test("16^^f/4^^3.0e0*^3", "5", "*^3", V_EQ);
}

// LARGE_NUM has 14057 digits.
#define LARGE_NUM ""

inline void
test_large() {
  test(LARGE_NUM, LARGE_NUM, "", V_EQ);
}

int
main() TRY {
  set_handlers();
  ret = 0;

#ifdef TEST_LARGE_EXPONENTS
  struct rlimit rl;
  rl.rlim_cur = RLIM_INFINITY;
  rl.rlim_max = RLIM_INFINITY;
  if (setrlimit(RLIMIT_STACK, &rl) == -1) {
    nout << "Failed to set stack limit." << endl;
    exit(1);
  }
#endif

  test_symbols();
  test_integers();
  test_hexadecimals();
  test_bases();
  test_denominators();
  test_large();

  return ret;
}
CATCH
