/*! \page Prolog_Interface Prolog Interface


\subsection PI_Intro Introduction

To be written.


\subsection PI_SD_Features System-Dependent Features

To be written.


<H4>GNU Prolog</H4>

To be written.


<H4>SWI Prolog</H4>

To be written.


<H4>SICStus Prolog</H4>

In order to use the library you should
load <CODE>ppl_sicstus.pl</CODE>.


\subsection PI_SI_Features System-Independent Features

Introduce the basic concepts here.

<H4><CODE>ppl_new_polyhedron(-Address, +Integer)</CODE></H4>

   Creates a new universe polyhedron with <CODE>Integer</CODE> dimensions
   with reference <CODE>Address</CODE>.
   Thus the query
       \code
       |?- ppl_new_polyhedron(X, 3).
       \endcode
   creates the polyhedron defining the 3-dimensional vector space
   \f$\Rset^3\f$ with reference address in \p X.

<H4><CODE>ppl_new_empty_polyhedron(-Address, +Integer)</CODE></H4>

   Creates a new empty polyhedron with <CODE>Integer</CODE> dimensions
   with reference address <CODE>Address</CODE>.
   Thus the query
       \code
      |?- ppl_new_empty_polyhedron(X, 3).
       \endcode
   creates an empty polyhedron embedded in \f$\Rset^3\f$ with
   reference address in \p X.

<H4><CODE>ppl_delete_polyhedron(+Address)</CODE></H4>

   Deletes the polyhedron referenced by <CODE>Address</CODE>.

<H4><CODE>ppl_space_dimension(+Address, -Integer+)</CODE></H4>

   There must be a polyhedron \p P referenced by <CODE>Address</CODE>.
   Returns in <CODE>Integer</CODE> the dimension of the vector space 
   containing \p P.

<H4><CODE>ppl_insert_constraint(+Address, +Constraint)</CODE></H4>

   Adds the constraint <CODE>Constraint</CODE> to the polyhedron 
   referenced by <CODE>Address</CODE>.
   <CODE>Constraint</CODE> is a term accepted by the grammar below.
\code
   Constraint -->   Expr = Expr    equation
                  | Expr =< Expr   nonstrict inequation
                  | Expr >= Expr   nonstrict inequation

   Expr   -->   PPL_Variable
              | number         floating point or integer
              | + Expr         unary plus
              | - Expr         unary minus
              | Expr + Expr    addition
              | Expr - Expr    subtraction
              | Expr * Expr    multiplication
              | Expr / Expr    division

   PPL_Var -->  '$VAR'(N)      variable (N a non-negative integer)
\endcode
    Thus after the query
\code
      |?- ppl_new_polyhedron(X, 3),
	  ppl_check_empty(X),
	  ppl_insert_constraint(X, 4*'$VAR'(0)+'$VAR'(1)-2*'$VAR'(2) >= 5).
\endcode
    the polyhedron referenced by \p X is defined to be the set of points
    in the 3-dimensional vector space satisfying the constraint
    \f$4x + y - 2z >= 5\f$.

<H4><CODE>ppl_insert_generator(+Address, +Generator)</CODE></H4>

   Adds the generator <CODE>Generator</CODE> to the polyhedron \p P referenced 
   by <CODE>Address</CODE>.
   <CODE>Generator</CODE> is a term accepted by the grammar below.

\code
   Generator -->   vertex(Expr)      vertex
                 | vertex(Expr,Int)  vertex 
                                     (Int is the denominator so that the
                                     vertex is defined by Expr/Int)
                 | ray(Expr)         ray
                 | line(Expr)        line
\endcode

   Thus after the query
\code
     |?- ppl_new_polyhedron(X, 3),
	 ppl_insert_generator(X, vertex(-100*'$VAR'(0) - 5*'$VAR'(1),8)).
\endcode
    the polyhedron referenced by \p X is defined to be single vertex 
    \f$(-12.5, -0.625, 0)^\transpose\f$ in the 3-dimensional vector space.


<H4><CODE>ppl_insert_constraints(+Address, +List_of_Constraints)</CODE></H4>

   Adds the constraints in list <CODE>List_of_Constraints</CODE>
   to the polyhedron referenced by <CODE>Address</CODE>.

<H4><CODE>ppl_insert_generators(+Address, +List_of_Generators)</CODE></H4>

   Adds the generators in list <CODE>List_of_Generators</CODE>
   to the polyhedron referenced by <CODE>Address</CODE>.

<H4><CODE>ppl_remove_dimensions(+Address, +List_of_PPL_Vars)</CODE></H4>

   The dimensions corresponding to the variables in list
   <CODE>List_of_PPL_Vars</CODE> are removed from the polyhedron 
   referenced by <CODE>Address</CODE>.

<H4><CODE>ppl_add_dimensions_and_embed(+Address, +Integer)</CODE></H4>

   Adds <CODE>Integer</CODE> new dimensions and does not
   embed the old polyhedron referenced by <CODE>Address</CODE>
   in the new space.

<H4><CODE>ppl_add_dimensions_and_project(+Address, +Integer)</CODE></H4>

   Adds <CODE>Integer</CODE> new dimensions and embeds the old polyhedron
   referenced by <CODE>Address</CODE> in the new space.

<H4><CODE>ppl_check_empty(+Address)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Address</CODE> is empty.

<H4><CODE>ppl_get_constraints(+Address, -List_of_Constraints)</CODE></H4>

   <CODE>List_of_Constraints</CODE> is bound to the system of constraints
   defining the polyhedron at <CODE>Address</CODE>.

<H4><CODE>ppl_get_generators(+Address, -List_of_Generators)</CODE></H4>

   <CODE>List_of_Generators</CODE> is bound to the system of generators
   defining the polyhedron at <CODE>Address</CODE>.

<H4><CODE>ppl_intersection_assign(+Address_1, +Address_2)</CODE></H4>

   Computes the intersection of the polyhedra referenced by
   <CODE>Address_1</CODE> and <CODE>Address_2</CODE> and places
   the result at <CODE>Address_1</CODE>.

<H4><CODE>ppl_convex_hull_assign(+Address_1, +Addressn_2)</CODE></H4>

   Computes the convex hull of the polyhedra referenced by
   <CODE>Address_1</CODE> and <CODE>Address_2</CODE> and places
   the result at <CODE>Address_1</CODE>.

<H4><CODE>ppl_widening_assign(+Address_1, +Address_2)</CODE></H4>

   Computes the widening between the polyhedra referenced by
   <CODE>Address_1</CODE> and <CODE>Address_2</CODE> and places
   the result at <CODE>Address_1</CODE>.

*/

