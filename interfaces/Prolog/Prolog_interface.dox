/*! \page Prolog_Interface Prolog Interface


\subsection PI_Intro Introduction

This Prolog library is an interface to the PPL and
provides Prolog operations for creating and
manipulating the PPL polyhedra.

\subsection PI_SD_Features System-Dependent Features

<H4>CIAO Prolog</H4>

Support for CIAO Prolog is under development and will be available in 
  a future release. 

<H4>GNU Prolog</H4>

Support for GNU Prolog is under development and will be available in 
  a future release. 

<H4>SICStus Prolog</H4>

In order to use the library you should
load <CODE>ppl_sicstus.pl</CODE>.

<H4>SWI Prolog</H4>

Support for SWI Prolog is under development and will be available in 
  a future release. 

\subsection PI_SI_Features System-Independent Features

The PPL predicates provided  for the Prolog interface are specified below.

The specification uses the following grammar rules:
\code
 VarId     -->   non-negative integer  variable identifier

 PPL_Var   -->   '$VAR'(VarId)         PPL variable

 LinExpr   -->    PPL_Var              PPL variable
                | number               integer
                | + LinExpr            unary plus
                | - LinExpr            unary minus
                | LinExpr + LinExpr    addition
                | LinExpr - LinExpr    subtraction
                | number * LinExpr     multiplication
                | LinExpr * number     multiplication

 Constraint -->   LinExpr = LinExpr    equation
                | LinExpr =< LinExpr   nonstrict inequation
                | LinExpr >= LinExpr   nonstrict inequation

 Generator -->    point(LinExpr)       point
                | point(LinExpr,Int)   point
                                       (Int is the denominator so that the
                                       point is defined by Expr/Int)
                | ray(LinExpr)         ray
                | line(LinExpr)        line
\endcode


We first give some general information about the Prolog interface
to the PPL library.

-  The Prolog interface provides access to the
   PPL polyhedra by means of Prolog terms we call <EM>handles</EM>.
   The data structure of a handle,
   is implementation-dependent, system-dependent and
   version-dependent, and, for this reason, deliberately left unspecified.
   What we do guarantee is that a handle is an ordinary Prolog term
   that can be used as such and requiring very little memory.

-  Only terms bound to <EM>valid handles</EM> may be used to access
   PPL polyhedra.
   A PPL polyhedron can be created or copied and a Prolog term
   unified with a valid handle for accessing this polyhedron by using,
   <CODE>ppl_new_polyhedron/2</CODE>,
   <CODE>ppl_new_empty_polyhedron/2</CODE> or
   <CODE>ppl_copy_polyhedron/2</CODE>.
   On the other hand, once a handle has been used as an argument in 
   <CODE>ppl_delete_polyhedron/1</CODE>,
   it becomes an invalid handle.
   Before executiing a query,
   a valid handle is required in all argument positions
   identified in the detailed descriptions of the predicates by
   <CODE>+Handle</CODE>.
   If a term in such a position is not a valid handle,
   the behavior of the query is undefined, .

- As soon as a PPL polyhedron is no longer required,
  the memory occupied by it should be released
  using the PPL predicate <CODE>ppl_delete_polyhedron/1</CODE>.
  To understand why this is important,
  consider a Prolog program and a variable that is bound to
  a Herbrand term.
  When the variable dies (goes out of scope) or is uninstantiated
  (on backtracking) the term it is bound to is amenable to garbage collection.
  But this only applies for the standard domain of the language:
  Herbrand terms.
  In Prolog+PPL, when a variable bound to a handle for a PPL Polyhedron dies
  or is uninstantiated,
  the handle can be garbage-collected, but the polyhedra to which
  the handle refers will not be released.
  
- For a PPL polyhedron with space dimension \p k,
  the identifiers used for the PPL variables in
  the constraints and the generators
  must lie between 0 and \f$k-1\f$.
  Moreover, when using the predicates that combine PPL polyhedra
  or add constraints or generators to a representation of
  a PPL polyhedron,
  the polyhedra referenced and any constraints or generators in the call
  should follow all the rules stated in the dimension-compatibility
  paragraph in the Introduction.

- There are a number of predicates whose name ends with
  <CODE>_and_minimize</CODE>.
  These are provided to help the user obtain better performance.<BR>
  For some of the operations on polyhedra in the PPL,
  the internal representation of a polyhedra has to be <EM>minimized</EM>:
  if it is not already minimized,
  an extra PPL minimization operation is performed first.
  However this operation may be very costly
  and, for this reason, the PPL library is lazy and avoids
  it as much as it can.
  For this reason, a predicate without <CODE>_and_minimize</CODE> ending
  should be used
  unless a minimized representation is needed for the next PPL operation.
  In that case it is more efficient to use
  the <CODE>_and_minimize</CODE> predicate.
  As an example, suppose you have to compute the poly-hull of several
  polyhedra. Then use the
  <CODE>ppl_poly_hull_assign</CODE>
  for each intermediate step and
  <CODE>ppl_poly_hull_assign_and_minimize</CODE> for the last step.
  If you just have  to compute the poly-hull of two polyhedra, then use
  <CODE>ppl_poly_hull_assign_and_minimize</CODE>.

See the specifications of individual predicates for examples and
more information regarding these issues.

<H4><CODE>ppl_new_polyhedron(-Handle, +Integer)</CODE></H4>

   Creates a new universe polyhedron \f$P\f$ with <CODE>Integer</CODE>
   dimensions.
   <CODE>Handle</CODE> is unified with the handle for \f$P\f$.
   Thus the query
\code
   ?- ppl_new_polyhedron(X, 3).
\endcode
   creates the polyhedron defining the 3-dimensional vector space
   \f$\Rset^3\f$ with \p X bound to a valid handle for accessing it.

<H4><CODE>ppl_new_empty_polyhedron(-Handle, +Integer)</CODE></H4>

   Creates a new empty polyhedron \f$P\f$ with <CODE>Integer</CODE> dimensions.
   <CODE>Handle</CODE> is unified with the handle for \f$P\f$.
   Thus the query
\code
   ?- ppl_new_empty_polyhedron(X, 3).
\endcode
   creates an empty polyhedron embedded in \f$\Rset^3\f$ with
   \p X bound to a valid handle for accessing it.

<H4><CODE>ppl_copy_polyhedron(+Handle1, -Handle2)</CODE></H4>

   If <CODE>Handle1</CODE> refers to a polyhedron \f$P_1\f$,
   then a copy \f$P_2\f$ of \f$P_1\f$ is created and <CODE>Handle2</CODE>
   is unified with the handle for \f$P_2\f$.

<H4><CODE>ppl_delete_polyhedron(+Handle)</CODE></H4>

   Deletes the polyhedron referenced by <CODE>Handle</CODE>.
   After execution,
   <CODE>Handle</CODE> is no longer a valid handle for a PPL polyhedron.

<H4><CODE>ppl_space_dimension(+Handle, -Integer)</CODE></H4>

   If \f$P\f$ is the polyhedron referenced by <CODE>Handle</CODE>,
   it unifies the space dimension of \f$P\f$ with <CODE>Integer</CODE>.

<H4><CODE>ppl_add_constraint(+Handle, +Constraint)</CODE></H4>

   If \f$CS\f$ is the constraint system representing
   the polyhedron referenced by <CODE>Handle</CODE> before execution,
   then, after execution,
   <CODE>Handle</CODE> refers to the polyhedron
   represented by the constraint system obtained by adding
   <CODE>Constraint</CODE> to \f$CS\f$.
    Thus after executing the query
\code
   ?- ppl_new_polyhedron(X, 3),
      A = '$VAR'(0), B = '$VAR'(1), C = '$VAR'(2),
      ppl_add_constraint(X, 4*A + B - 2*C >= 5).
\endcode
    the polyhedron with handle \p X is defined to be the set of points
    in the vector space \f$\Rset^3\f$ satisfying the constraint
    \f$4x + y - 2z >= 5\f$.

The constraint <CODE>Constraint</CODE> and the
polyhedron referenced by <CODE>Handle</CODE> must be dimension compatible.
This means that the identifiers for the PPL variables in
<CODE>Constraint</CODE> must be strictly less than the space
dimension of the polyhedron. 

<H4><CODE>ppl_add_generator(+Handle, +Generator)</CODE></H4>

   If \f$GS\f$ is the generator system representing
   the polyhedron referenced by <CODE>Handle</CODE> before execution,
   then, after execution,
   <CODE>Handle</CODE> refers to the polyhedron
   represented by the generator system obtained by adding
   <CODE>Generator</CODE> to \f$GS\f$.
   Thus after the query
\code
   ?- ppl_new_polyhedron(X, 3),
      A = '$VAR'(0), B = '$VAR'(1), C = '$VAR'(2), 
      ppl_add_generator(X, point(-100*A - 5*B, 8)).
\endcode
    the polyhedron with handle \p X is defined to be single point 
    \f$(-12.5, -0.625, 0)^\transpose\f$ in the vector space \f$\Rset^3\f$.

As for <CODE>ppl_add_constraint</CODE>, the identifiers for the
PPL variables in <CODE>Generator</CODE> must be strictly
less than the space dimension of the polyhedron referenced
by <CODE>Handle</CODE>. 

<H4><CODE>ppl_add_constraints(+Handle, +List_of_Constraints)</CODE></H4>

   If \f$CS\f$ is the constraint system representing
   the polyhedron referenced by <CODE>Handle</CODE> before execution,
   then, after execution,
   <CODE>Handle</CODE> refers to the polyhedron
   represented by the constraint system obtained by adding
   the constraints in list <CODE>List_of_Constraints</CODE> to \f$CS\f$.
   E.g.,
\code
   | ?- ppl_new_polyhedron(X, 2),
        A = '$VAR'(0), B = '$VAR'(1),
        ppl_add_constraints(X, [4*A + B >= 3, A = 1]),
        ppl_get_constraints(X, CS).
 
   CS = [4*A+1*B>=3,1*A=1] ?
\endcode  
The updated polyhedron referenced by <CODE>Handle</CODE> can be empty
and a query will succeed even when
<CODE>List_of_Constraints</CODE> is unsatisfiable.
                                                                       
<H4><CODE>ppl_add_constraints_and_minimize(+Handle, 
                                   +List_of_Constraints)</CODE></H4>

   If \f$CS\f$ is the constraint system representing
   the polyhedron referenced by <CODE>Handle</CODE> before execution,
   then, after execution,
   <CODE>Handle</CODE> refers to the polyhedron
   represented by the constraint system obtained by adding
   the constraints in list <CODE>List_of_Constraints</CODE> to \f$CS\f$.
   E.g.,
\code
   ?- ppl_new_polyhedron(X, 2),
      A = '$VAR'(0), B = '$VAR'(1),
      ppl_add_constraints_and_minimize(X, [4*A + B >= 3, A = 1]),
      ppl_get_constraints(X, CS).

   CS = [1*B>= -1,1*A=1]
\endcode                                                                          This will fail if, after adding the constraints, the polyhedron is empty.
   E.g., the following will fail,
\code
   ?- A = '$VAR'(0), B = '$VAR'(1),
      ppl_new_polyhedron(X, 2),
      ppl_add_constraints_and_minimize(X, [4*A + B >= 3, A = 0, B =< 0]),
      ppl_get_constraints(X, CS).
\endcode                                                                              
<H4><CODE>ppl_add_generators(+Handle, +List_of_Generators)</CODE></H4>

   If \f$GS\f$ is the generator system representing
   the polyhedron referenced by <CODE>Handle</CODE> before execution,
   then, after execution,
   <CODE>Handle</CODE> refers to the polyhedron
   represented by the generator system obtained by adding
   the generators in list <CODE>List_of_Generators</CODE> to \f$GS\f$.

   If the system of generators representing a polyhedron
   is non-empty, then it must include a point
   (see the paragraph on generator representation in
   the Introduction).
   Thus care must be taken to ensure that, before calling this
   predicate, either the polyhedron referenced by <CODE>Handle</CODE>
   is non-empty or that whenever <CODE>List_of_Generators</CODE> is
   non-empty the first element defines a point.
   E.g.,
\code
   ?- ppl_new_empty_polyhedron(X, 3),
      A='$VAR'(0), B = '$VAR'(1), C = '$VAR'(2),
      ppl_add_generators(X, 
        [point(1*A + 1*B + 1*C, 1), ray(1*A), ray(2*A)]),
      ppl_get_generators(X, GS).

   GS = [ray(2*A), point(1*A+1*B+1*C), ray(1*A)]
\endcode
       
<H4><CODE>ppl_add_generators_and_minimize(+Handle, 
                                   +List_of_Generators)</CODE></H4>

   If \f$GS\f$ is the generator system representing
   the polyhedron referenced by <CODE>Handle</CODE> before execution,
   then, after execution,
   <CODE>Handle</CODE> refers to the polyhedron
   represented by the generator system obtained by adding
   the generators in list <CODE>List_of_Generators</CODE> to \f$GS\f$.

   Unlike the predicate <CODE>ppl_add_generators</CODE>,
   the order of the generators in
   <CODE>List_of_Generators</CODE> is not important.
   E.g.,
\code
   ?- ppl_new_empty_polyhedron(X, 3),
      A='$VAR'(0), B = '$VAR'(1), C = '$VAR'(2),
      ppl_add_generators_and_minimize(X, 
        [ray(1*A), ray(2*A), point(1*A + 1*B + 1*C, 1)]),
      ppl_get_generators(X, GS).
 
   GS = [point(1*A+1*B+1*C), ray(1*A)]
\endcode

<H4><CODE>ppl_remove_dimensions(+Handle, +List_of_PPL_Vars)</CODE></H4>

   If, before the call is executed, <CODE>Handle</CODE>
   refers to polyhedron \f$P\f$ then,
   after execution, <CODE>Handle</CODE> refers to the polyhedron obtained 
   by removing the dimensions given by the identifiers of the
   PPL variables in list
   <CODE>List_of_PPL_Vars</CODE> from \f$P\f$.
   The identifiers for the remaining PPL variables are renumbered so that
   they are consecutive and the maximum index is less than the number
   of dimensions.
   E.g.,
\code
   ?- ppl_new_polyhedron(X, 3),
      A='$VAR'(0), B = '$VAR'(1), C = '$VAR'(2),
      ppl_remove_dimensions(X, [B]),
      ppl_space_dimension(X, K),
      ppl_get_generators(X, GS). 

   K = 2,
   GS = [point(0),line(1*A),line(1*B),line(0)]         
\endcode

<H4><CODE>ppl_remove_higher_dimensions(+Handle, +Integer))</CODE></H4>

   If, before the call is executed, <CODE>Handle</CODE>
   refers to polyhedron \f$P\f$ then,
   after execution, <CODE>Handle</CODE> refers to the polyhedron obtained 
   by projecting \f$P\f$ onto the first <CODE>Integer</CODE> dimensions.
   E.g. 
\code
   ?- ppl_new_polyhedron(X, 5),
      ppl_remove_higher_dimensions(X, 3),
      ppl_space_dimension(X, K).
 
   K = 3,
\endcode
   The polyhedron \f$P\f$ referenced by <CODE>Handle</CODE>
   must have space dimension \f$k\f$ greater that or equal to
   <CODE>Integer</CODE>.

<H4><CODE>ppl_add_dimensions_and_embed(+Handle, +Integer)</CODE></H4>

   If, before the call is executed, <CODE>Handle</CODE>
   refers to polyhedron \f$P\f$ and
   $\f$Q\f$ is the polyhedron obtained from \f$P\f$ by
   adding <CODE>Integer</CODE> new dimensions and embedding \f$P\f$
   in the new space, then, after execution, <CODE>Handle</CODE>
   refers to \f$Q\f$.
   E.g.,
\code
   ?- ppl_new_polyhedron(X, 0),
      ppl_add_dimensions_and_embed(X, 2),
      ppl_get_constraints(X, CS),
      ppl_get_generators(X, GS).
 
   CS = [],
   GS = [point(0),line(1*A),line(1*B)]
\endcode
    
<H4><CODE>ppl_add_dimensions_and_project(+Handle, +Integer)</CODE></H4>

   If, before the call is executed, <CODE>Handle</CODE>
   refers to polyhedron \f$P\f$ and
   $\f$Q\f$ is the polyhedron obtained from \f$P\f$ by
   adding <CODE>Integer</CODE> new dimensions and projecting \f$P\f$
   in the new space, then, after execution, <CODE>Handle</CODE>
   refers to \f$Q\f$.
   E.g.,
\code
   ?- ppl_new_polyhedron(X, 0),
      ppl_add_dimensions_and_project(X, 2),
      ppl_get_constraints(X, CS),
      ppl_get_generators(X, GS).
 
   CS = [1*A=0,1*B=0],
   GS = [point(0)]
\endcode

<H4><CODE>ppl_check_empty(+Handle)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Handle</CODE> is empty.

<H4><CODE>ppl_check_universe(+Handle)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Handle</CODE> is the universe.

<H4><CODE>ppl_is_bounded(+Handle)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Handle</CODE> is bounded.

<H4><CODE>ppl_get_constraints(+Handle, -List_of_Constraints)</CODE></H4>

   <CODE>List_of_Constraints</CODE> is unified with a list of
   the constraints in the constraints system
   representing the polyhedron referenced by <CODE>Handle</CODE>.

<H4><CODE>ppl_get_generators(+Handle, -List_of_Generators)</CODE></H4>

   <CODE>List_of_Generators</CODE> is unified with a list of
   the generators in the generators system
   representing the polyhedron referenced by <CODE>Handle</CODE>.

<H4><CODE>ppl_intersection_assign(+Handle_1, +Handle_2)</CODE></H4>

   Computes the intersection \f$P\f$ of the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_intersection_assign_and_minimize(+Handle_1,
                     +Handle_2)</CODE></H4>

   Computes the intersection \f$P\f$ of the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.


<H4><CODE>ppl_poly_hull_assign(+Handle_1, +Handle_2)</CODE></H4>

   Computes the poly-hull \f$P\f$ of the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_poly_hull_assign_and_minimize(+Handle_1,
               +Handle_2)</CODE></H4>

   Computes the poly-hull \f$P\f$ of the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_poly_difference_assign(+Handle_1, +Handle_2)</CODE></H4>

   Computes the poly-hull \f$P\f$ of the set-theoretic difference of
   the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_poly_difference_assign_and_minimize(+Handle_1,
               +Handle_2)</CODE></H4>

   Computes the poly-hull \f$P\f$ of the set-theoretic difference of
   the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_widening_assign(+Handle_1, +Handle_2)</CODE></H4>

   Computes the widening \f$P\f$ between the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_limited_widening_assign(+Handle_1, +Handle_2,
               +List_of_Constraints)</CODE></H4>

   Computes the widening \f$P\f$ between the polyhedra referenced by
   <CODE>Handle_1</CODE> and <CODE>Handle_2</CODE>,
   limited by <CODE>List_of_Constraints</CODE>.
   After execution, <CODE>Handle_1</CODE> refers to \f$P\f$.

<H4><CODE>ppl_polyhedron_included_or_equal(+Handle_1, +Handle_2)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Handle_1</CODE> is included in or
   equal to the polyhedron referenced by <CODE>Handle_2</CODE>.

<H4><CODE>ppl_polyhedron_equal(+Handle_1, +Handle_2)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Handle_1</CODE> is
   equal to the polyhedron referenced by <CODE>Handle_2</CODE>.

<H4><CODE>ppl_polyhedron_strictly_included(+Handle_1, +Handle_2)</CODE></H4>

   Succeeds if and only if the polyhedron referenced by
   <CODE>Handle_1</CODE> is included in but not
   equal to the polyhedron referenced by <CODE>Handle_2</CODE>.

<H4><CODE>ppl_affine_image(+Handle, +PPL_Var,
               +LinExpr, +Integer)</CODE></H4>

   Transforms the polyhedron referenced by <CODE>Handle</CODE> 
   assigning the affine expression <CODE>LinExpr</CODE>/<CODE>Integer</CODE>
   to <CODE>PPL_Var</CODE>.

<H4><CODE>ppl_affine_preimage(+Handle, +PPL_Var,
               +LinExpr, +Integer)</CODE></H4>

This is the inverse transformation to that for <CODE>ppl_affine_image</CODE>.


<H4><CODE>ppl_relation_with_constraint(+Handle, +Constraint,
               -Relation)</CODE></H4>

Computes the relation the polyhedron \f$P\f$
referenced by <CODE>Handle</CODE>
has with <CODE>Constraint</CODE>.
<CODE>Relation</CODE> is unified to a value as follows:

<CODE>is_disjoint</CODE>, if \f$P\f$
and the set of points satisfying
 <CODE>Constraint</CODE>  are disjoint;

<CODE>strictly_intersects</CODE>, if \f$P\f$
intersects but is not included in the set of points satisfying
 <CODE>Constraint</CODE>;

<CODE>is_included</CODE>, if \f$P\f$
is included in the set of points satisfying
 <CODE>Constraint</CODE>;

<CODE>saturates</CODE>, if \f$P\f$
is included in the set of points saturating
 <CODE>Constraint</CODE>;

<CODE>nothing</CODE>, if nothing is known about the relation.


<H4><CODE>ppl_relation_with_generator(+Handle, +Generator,
               -Relation)</CODE></H4>

Computes the relation the polyhedron \f$P\f$
referenced by <CODE>Handle</CODE>
has with <CODE>Generator</CODE>.
<CODE>Relation</CODE>, is unified to a value as follows:

<CODE>subsumes</CODE>, if adding <CODE>Generator</CODE>
would not change \f$P\f$;

<CODE>nothing</CODE>, if nothing is known about the relation.


*/

