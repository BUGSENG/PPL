%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                   %
%                          Extra test code                          %
%                                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- dynamic(noisy/1).

% check_noisy
% This also executes all the test predicates but also prints some messages
% including the banner, version numbers and expected output from
% the exception tests.

check_noisy :-
   make_noisy,
   check_all,
   make_quiet.

check_extra_noisy :-
   make_extra_noisy,
   check_all,
   make_quiet.

%%%%%%%%%%%% predicates for switching on/off output messages %

make_extra_noisy :-
  (retract(noisy(_)) ->
      make_extra_noisy
  ;
      assertz(noisy(2))
  ).

make_noisy :-
  (retract(noisy(_)) ->
      make_noisy
  ;
      assertz(noisy(1))
  ).

make_quiet :-
  (retract(noisy(_)) ->
      make_quiet
   ; assertz(noisy(0))
  ).

%%%%%%%%%%%% predicates for output messages %%%%%%%%%%%%%%%%%%%%%

error_message(Message):-
   write_all(Message),
   fail.

display_message(Message):-
    noisy(_),
    (noisy(0) -> true ;
     (write_all(Message))
    ).

write_all([]) :- nl.
write_all([Phrase|Phrases]):-
   (Phrase == nl ->
      nl
   ;
      (write(Phrase),
      write(' '))
   ),
   write_all(Phrases).

%%%%%%%%%%%% predicates for variable generation %%%%%%%%%%%%%%%%%%

% make_var_list(+I,+Dimension,?Variable_List)
% constructs a list of variables with indices from I to Dimension - 1.
% It is assumed that I =< Dimension.

make_vars(Dim, Var_List) :-
  make_var_list(0, Dim, Var_List).
make_var_list(Dim, Dim, []) :- !.
make_var_list(I, Dim, ['$VAR'(I)|Var_List]) :-
  (I1 is I + 1,
  make_var_list(I1, Dim, Var_List)).

%%%%%%%%%%%% predicates for succeeded and failed predicate %%%%%%%

write_success(Predicate_name) :-
  display_message([test, for, Predicate_name, 'succeeded.']).

write_error(Predicate_name) :-
  write_all([test, for, Predicate_name, 'failed.']).

%%%%%%%%%%%% predicates for test data %%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- discontiguous(ppl_constraints_test_data/4).
:- discontiguous(ppl_generators_test_data/4).
:- discontiguous(ppl_congruences_test_data/4).
:- discontiguous(ppl_grid_generators_test_data/4).

ppl_initial_test_system(constraint, universe).
ppl_initial_test_system(congruence, universe).
ppl_initial_test_system(generator, empty).
ppl_initial_test_system(grid_generator, empty).

/* Some test data. */

ppl_constraints_test_data(1, _Topology, 1, CS) :-
  (make_vars(1, [A]),
   CS = [A = A]).

ppl_generators_test_data(1, _Topology, 1, GS) :-
  (make_vars(1, [A]),
   GS = [point(0), line(A)]).

ppl_constraints_test_data(2, _Topology, 1, CS) :-
  (make_vars(1, [A]),
   CS = [A = 0]).

ppl_generators_test_data(2, _Topology, 1, GS) :-
  (make_vars(1, [A]),
   GS = [point(0*A)]).

ppl_constraints_test_data(3, T, 1, CS) :-
  (T \= t_NNC_,
   make_vars(1, [A]),
   CS = [A >= 0]).

ppl_constraints_test_data(3, t_NNC_, 1, CS) :-
  (make_vars(1, [A]),
   CS = [A > 0]).

ppl_generators_test_data(3, T, 1, GS) :-
  (T \= t_NNC_,
   make_vars(1, [A]),
   GS = [point(0*A), ray(A)]).

ppl_generators_test_data(3, t_NNC_, 1, GS) :-
  (make_vars(1, [A]),
   GS = [closure_point(0*A), point(A), ray(A)]).

ppl_congruences_test_data(1, _Topology, 1, CS) :-
  (make_vars(1, [A]),
   CS = [A = A]).

ppl_grid_generators_test_data(1, _Topology, 1, GS) :-
  (make_vars(1, [A]),
   GS = [grid_point(0), grid_line(A)]).

ppl_congruences_test_data(2, _Topology, 1, CS) :-
  (make_vars(1, [A]),
   CS = [A = 0]).

ppl_grid_generators_test_data(2, _Topology, 1, GS) :-
  (make_vars(1, [A]),
   GS = [grid_point(0*A)]).

ppl_congruences_test_data(3, _Topology, 1, CS) :-
  (make_vars(1, [A]),
   CS = [A =:= 0]).

ppl_grid_generators_test_data(3, _Topology, 1, GS) :-
  (make_vars(1, [A]),
   GS = [grid_point(0*A), parameter(1*A)]).

ppl_box_test_data(1, _Topology, 1, [i(c(0), o(pinf))]).
ppl_box_test_data(2, _Topology, 1, [i(c(0), c(0))]).
ppl_box_test_data(3, _Topology, 1, [empty]).
ppl_box_test_data(4, _Topology, 2, [i(c(1/2), o(pinf)), i(o(minf), c(-1/2))]).
ppl_box_test_data(5, _Topology, 0, [empty]).
ppl_box_test_data(6, _Topology, 2, [i(c(-4), c(1)), i(c(-1), c(1))]).
ppl_box_test_data(7, T, 2, [i(c(0/2), o(pinf)), i(o(minf), c(1))]) :-
  T \= t_NNC_.
ppl_box_test_data(7, t_NNC_, 2, [i(o(0/2), o(pinf)), i(o(minf), o(1))]).
