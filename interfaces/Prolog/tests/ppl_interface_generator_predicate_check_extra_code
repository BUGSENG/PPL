%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                   %
%                          Extra test code                          %
%                                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% make_var_list(+I,+Dimension,?Variable_List)
% constructs a list of variables with indices from I to Dimension - 1.
% It is assumed that I =< Dimension.

make_vars(Dim, Var_List) :-
  make_var_list(0, Dim, Var_List).
make_var_list(Dim, Dim, []) :- !.
make_var_list(I, Dim, ['$VAR'(I)|Var_List]) :-
  (I1 is I + 1,
  make_var_list(I1, Dim, Var_List)).

write_error(Predicate_name) :-
  write(' test for '),
  write(Predicate_name),
  write(' failed.'), nl.

/* Some test data. */

ppl_constraints_test_data(1, 1, CS, universe) :-
  (make_vars(1, [A]),
  CS = [A = A]).

ppl_constraints_test_data(2, 1, CS, universe) :-
  (make_vars(1, [A]),
  CS = [A = 0]).

ppl_congruences_test_data(1, 1, CS, universe) :-
  (make_vars(1, [A]),
  CS = [A = A]).

ppl_congruences_test_data(2, 1, CS, universe) :-
  (make_vars(1, [A]),
  CS = [A = 0]).

ppl_generators_test_data(1, 1, GS, empty) :-
  (make_vars(1, [A]),
  GS = [point(0), line(A)]).

ppl_generators_test_data(2, 1, GS, empty) :-
  (make_vars(1, [A]),
  GS = [point(0*A)]).

ppl_grid_generators_test_data(1, 1, GS, empty) :-
  (make_vars(1, [A]),
  GS = [grid_point(0), grid_line(A)]).

ppl_grid_generators_test_data(2, 1, GS, empty) :-
  (make_vars(1, [A]),
  GS = [grid_point(0*A)]).

ppl_box_test_data(1, 1, [i(c(0), o(pinf))]).
ppl_box_test_data(2, 1, [i(c(0), c(0))]).
ppl_box_test_data(3, 1, [empty]).
ppl_box_test_data(4, 2, [i(c(1/2), o(pinf)), i(o(minf), c(-1/2))]).
ppl_box_test_data(5, 0, [empty]).
ppl_box_test_data(6, 2, [i(c(-4), c(1)), i(c(-1), c(1))]).
