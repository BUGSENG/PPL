/* Common part of the Prolog interfaces.  -*- C++ -*-
   Copyright (C) 2001-2003 Roberto Bagnara <bagnara@cs.unipr.it>

This file is part of the Parma Polyhedra Library (PPL).

The PPL is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

The PPL is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
USA.

For the most up-to-date information see the Parma Polyhedra Library
site: http://www.cs.unipr.it/ppl/ . */

#include "initializer.hh"
#include "BoundingBox.defs.hh"
#include "Constraint.defs.hh"
#include "ConSys.defs.hh"
#include "ConSys.inlines.hh"
#include "Generator.defs.hh"
#include "GenSys.defs.hh"
#include "GenSys.inlines.hh"
#include "Variable.defs.hh"
#include "LinExpression.defs.hh"
#include "Polyhedron.defs.hh"
#include "C_Polyhedron.defs.hh"
#include "NNC_Polyhedron.defs.hh"
#include "track_allocation.hh"
#include "Watchdog.defs.hh"
#include <exception>
#include <stdexcept>
#include <sstream>
#include <climits>

namespace PPL = Parma_Polyhedra_Library;

static void
handle_exception(const integer_out_of_range& e) {
  Prolog_term_ref culprit = Prolog_new_term_ref();
  Prolog_term_ref arg_no = Prolog_new_term_ref();
  Prolog_term_ref expected_domain = Prolog_new_term_ref();
  Prolog_term_ref et = Prolog_new_term_ref();

  Prolog_put_term(culprit, e.term());
  Prolog_put_long(arg_no, 1);
  {
    std::ostringstream domain;
    domain << "[" << LONG_MIN << ", " << LONG_MAX << "]";
    Prolog_put_atom_chars(expected_domain, domain.str().c_str());
  }
  Prolog_construct_compound(et,
			    Prolog_atom_from_string("integer_term_to_Integer"),
			    culprit);
  Prolog_construct_compound(et,
			    Prolog_atom_from_string("domain_error"),
			    et, arg_no, expected_domain, culprit);
  Prolog_raise_exception(et);
}

static void
handle_exception(const not_unsigned_int& e) {
  Prolog_term_ref culprit = Prolog_new_term_ref();
  Prolog_term_ref arg_no = Prolog_new_term_ref();
  Prolog_term_ref expected_domain = Prolog_new_term_ref();
  Prolog_term_ref et = Prolog_new_term_ref();

  Prolog_put_term(culprit, e.term());
  Prolog_put_long(arg_no, 1);
  {
    std::ostringstream domain;
    domain << "[" << 0 << ", " << UINT_MAX << "]";
    Prolog_put_atom_chars(expected_domain, domain.str().c_str());
  }
  Prolog_construct_compound(et,
			    Prolog_atom_from_string("get_unsigned_int/term_to_unsigned_int"),
			   culprit);
  Prolog_construct_compound(et,
			    Prolog_atom_from_string("domain_error"),
			    et, arg_no, expected_domain, culprit);
  Prolog_raise_exception(et);
}

static void
handle_exception(const non_linear& e) {
  Prolog_term_ref culprit = Prolog_new_term_ref();
  Prolog_term_ref arg_no = Prolog_new_term_ref();
  Prolog_term_ref expected_domain = Prolog_new_term_ref();
  Prolog_term_ref et = Prolog_new_term_ref();

  Prolog_put_term(culprit, e.term());
  Prolog_put_long(arg_no, 1);
  Prolog_put_atom_chars(expected_domain, "linear expression or constraint");
  Prolog_construct_compound(et, Prolog_atom_from_string(e.who()), culprit);
  Prolog_construct_compound(et, Prolog_atom_from_string("domain_error"),
			    et, arg_no, expected_domain, culprit);
  Prolog_raise_exception(et);
}

static void
handle_exception(const not_a_variable& e) {
  Prolog_term_ref culprit = Prolog_new_term_ref();
  Prolog_term_ref arg_no = Prolog_new_term_ref();
  Prolog_term_ref expected_domain = Prolog_new_term_ref();
  Prolog_term_ref et = Prolog_new_term_ref();

  Prolog_put_term(culprit, e.term());
  Prolog_put_long(arg_no, 1);
  Prolog_put_atom_chars(expected_domain, "$VAR(integer)");
  Prolog_construct_compound(et, Prolog_atom_from_string("get_variable"),
			    culprit);
  Prolog_construct_compound(et, Prolog_atom_from_string("domain_error"),
			    et, arg_no, expected_domain, culprit);
  Prolog_raise_exception(et);
}

static void
handle_exception(const not_a_polyhedron_kind& e) {
  Prolog_term_ref culprit = Prolog_new_term_ref();
  Prolog_term_ref arg_no = Prolog_new_term_ref();
  Prolog_term_ref expected_domain = Prolog_new_term_ref();
  Prolog_term_ref et = Prolog_new_term_ref();

  Prolog_put_term(culprit, e.term());
  Prolog_put_long(arg_no, 1);
  Prolog_put_atom_chars(expected_domain, "c or nnc");
  Prolog_construct_compound(et,
			    Prolog_atom_from_string("term_to_polyhedron_kind"),
			    culprit);
  Prolog_construct_compound(et, Prolog_atom_from_string("domain_error"),
			    et, arg_no, expected_domain, culprit);
  Prolog_raise_exception(et);
}

static void
handle_exception(const not_a_polyhedron_handle& e) {
  Prolog_term_ref culprit = Prolog_new_term_ref();
  Prolog_term_ref arg_no = Prolog_new_term_ref();
  Prolog_term_ref expected_domain = Prolog_new_term_ref();
  Prolog_term_ref et = Prolog_new_term_ref();

  Prolog_put_term(culprit, e.term());
  Prolog_put_long(arg_no, 1);
  Prolog_put_atom_chars(expected_domain, "polyhedron handle");
  Prolog_construct_compound(et,
			    Prolog_atom_from_string("term_to_polyhedron"),
			    culprit);
  Prolog_construct_compound(et, Prolog_atom_from_string("domain_error"),
			    et, arg_no, expected_domain, culprit);
  Prolog_raise_exception(et);
}

static void
handle_exception(const unknown_interface_error& e) {
  Prolog_term_ref et = Prolog_new_term_ref();
  Prolog_put_atom_chars(et, e.where());
  Prolog_raise_exception(et);
}

static void
handle_exception() {
  Prolog_term_ref et = Prolog_new_term_ref();
  Prolog_put_atom_chars(et, "PPL bug: unknown exception raised");
  Prolog_raise_exception(et);
}

static void
handle_exception(const std::exception& e) {
  Prolog_term_ref et = Prolog_new_term_ref();
  Prolog_put_atom_chars(et, e.what());
  Prolog_raise_exception(et);
}

class timeout_exception : public PPL::Throwable {
public:
  void throw_me() const {
    throw *this;
  }
  int priority() const {
    return 0;
  }
  timeout_exception() {
  }
};

static Prolog_atom timeout_exception_atom;

static Parma_Watchdog_Library::Watchdog* p_timeout_object = 0;

static void
reset_timeout() {
  if (p_timeout_object) {
    delete p_timeout_object;
    p_timeout_object = 0;
    PPL::abandon_exponential_computations = 0;
  }
}

static void
handle_exception(const timeout_exception&) {
  assert(p_timeout_object);
  reset_timeout();
  Prolog_term_ref et = Prolog_new_term_ref();
  Prolog_put_atom(et, timeout_exception_atom);
  Prolog_raise_exception(et);
}

#define CATCH_ALL \
  catch (const integer_out_of_range& e) { \
    handle_exception(e); \
  } \
  catch (const not_unsigned_int& e) { \
    handle_exception(e); \
  } \
  catch (const non_linear& e) { \
    handle_exception(e); \
  } \
  catch (const not_a_variable& e) { \
    handle_exception(e); \
  } \
  catch (const not_a_polyhedron_kind& e) { \
    handle_exception(e); \
  } \
  catch (const not_a_polyhedron_handle& e) { \
    handle_exception(e); \
  } \
  catch (const unknown_interface_error& e) { \
    handle_exception(e); \
  } \
  catch (const timeout_exception& e) { \
    handle_exception(e); \
  } \
  catch (const std::exception& e) { \
    handle_exception(e); \
  } \
  catch (...) { \
    handle_exception(); \
  }

// For Prolog lists.
static Prolog_atom a_nil;

// For variables.
static Prolog_atom a_dollar_VAR;

// For linear expressions.
static Prolog_atom a_plus;
static Prolog_atom a_minus;
static Prolog_atom a_asterisk;

// To represent rational numbers as fractions.
static Prolog_atom a_slash;

// For constraints.
static Prolog_atom a_equal;
static Prolog_atom a_greater_than_equal;
static Prolog_atom a_equal_less_than;
static Prolog_atom a_greater_than;
static Prolog_atom a_less_than;

// For generators.
static Prolog_atom a_line;
static Prolog_atom a_ray;
static Prolog_atom a_point;
static Prolog_atom a_closure_point;

// For the relation between a polyhedron and a constraint.
static Prolog_atom a_is_disjoint;
static Prolog_atom a_strictly_intersects;
static Prolog_atom a_is_included;
static Prolog_atom a_saturates;

// For the relation between a polyhedron and a generator.
static Prolog_atom a_subsumes;

// Denotes the "closed" topology and a closed interval boundary.
static Prolog_atom a_c;

// Denotes the "not necessarily closed" topology.
static Prolog_atom a_nnc;

// Denotes an open interval boundary.
static Prolog_atom a_o;

// Denotes the constructor that turns two boundaries into a proper interval.
static Prolog_atom a_i;

// Denotes the empty interval.
static Prolog_atom a_empty;

// Denote the -infinity and +infinity interval boundaries.
static Prolog_atom a_minf;
static Prolog_atom a_pinf;

// Denote complexity classes.
static Prolog_atom a_polynomial;
static Prolog_atom a_simplex;
static Prolog_atom a_any;

// Default timeout exception atom;
static Prolog_atom a_time_out;

static struct {
  Prolog_atom* p_atom;
  const char* name;
} const prolog_atoms[] = {
  { &a_nil,                 "[]" },

  { &a_dollar_VAR,          "$VAR" },

  { &a_plus,                "+" },
  { &a_minus,               "-" },
  { &a_asterisk,            "*" },

  { &a_slash,               "/" },

  { &a_equal,               "=" },
  { &a_greater_than_equal,  ">=" },
  { &a_equal_less_than,     "=<" },
  { &a_greater_than,        ">" },
  { &a_less_than,           "<" },

  { &a_line,                "line" },
  { &a_ray,                 "ray" },
  { &a_point,               "point" },
  { &a_closure_point,       "closure_point" },

  { &a_is_disjoint,         "is_disjoint" },
  { &a_strictly_intersects, "strictly_intersects" },
  { &a_is_included,         "is_included" },
  { &a_saturates,           "saturates" },

  { &a_subsumes,            "subsumes" },

  { &a_c,                   "c" },
  { &a_nnc,                 "nnc" },
  { &a_o,                   "o" },
  { &a_i,                   "i" },
  { &a_empty,               "empty" },

  { &a_minf,                "minf" },
  { &a_pinf,                "pinf" },

  { &a_polynomial,          "polynomial" },
  { &a_simplex,             "simplex" },
  { &a_any,                 "any" },

  { &a_time_out,            "time_out" },
};

static Prolog_term_ref
variable_term(PPL::dimension_type varid) {
  Prolog_term_ref v = Prolog_new_term_ref();
  Prolog_put_long(v, varid);
  Prolog_term_ref t = Prolog_new_term_ref();
  Prolog_construct_compound(t, a_dollar_VAR, v);
  return t;
}

static unsigned int
get_unsigned_int(long n) {
  if (n >= 0 && static_cast<unsigned long>(n) <= UINT_MAX)
    return n;
  else {
    Prolog_term_ref n_term = Prolog_new_term_ref();
    Prolog_put_long(n_term, n);
    throw not_unsigned_int(n_term);
  }
}

static unsigned int
term_to_unsigned_int(Prolog_term_ref t) {
  if (Prolog_is_integer(t)) {
    long v;
    if (Prolog_get_long(t, &v))
      return get_unsigned_int(v);
  }
  throw not_unsigned_int(t);
}

static Prolog_atom
term_to_polyhedron_kind(Prolog_term_ref t) {
  if (Prolog_is_atom(t)) {
    Prolog_atom name;
    if (Prolog_get_atom_name(t, &name)
	&& (name == a_c || name == a_nnc))
      return name;
  }
  throw not_a_polyhedron_kind(t);
}

static PPL::LinExpression
build_lin_expression(Prolog_term_ref t) {
  if (Prolog_is_integer(t))
    return PPL::LinExpression(integer_term_to_Integer(t));
  else if (Prolog_is_compound(t)) {
    Prolog_atom functor;
    int arity;
    Prolog_get_compound_name_arity(t, &functor, &arity);
    switch (arity) {
    case 1:
      {
	Prolog_term_ref arg = Prolog_new_term_ref();
	Prolog_get_arg(1, t, arg);
	if (functor == a_plus)
	  // Unary plus.
	  return build_lin_expression(arg);
	else if (functor == a_minus)
	  // Unary minus.
	  return -build_lin_expression(arg);
	else if (functor == a_dollar_VAR)
	  // Variable.
	  return PPL::Variable(term_to_unsigned_int(arg));
      }
      break;
    case 2:
      {
	Prolog_term_ref arg1 = Prolog_new_term_ref();
	Prolog_term_ref arg2 = Prolog_new_term_ref();
	Prolog_get_arg(1, t, arg1);
	Prolog_get_arg(2, t, arg2);
	if (functor == a_plus)
	  // Plus.
	  if (Prolog_is_integer(arg1))
	    return integer_term_to_Integer(arg1) + build_lin_expression(arg2);
	  else if (Prolog_is_integer(arg2))
	    return build_lin_expression(arg1) + integer_term_to_Integer(arg2);
	  else
	    return build_lin_expression(arg1) + build_lin_expression(arg2);
	else if (functor == a_minus)
	  // Minus.
	  if (Prolog_is_integer(arg1))
	    return integer_term_to_Integer(arg1) - build_lin_expression(arg2);
	  else if (Prolog_is_integer(arg2))
	    return build_lin_expression(arg1) - integer_term_to_Integer(arg2);
	  else
	    return build_lin_expression(arg1) - build_lin_expression(arg2);
	else if (functor == a_asterisk)
	  // Times.
	  if (Prolog_is_integer(arg1))
	    return integer_term_to_Integer(arg1) * build_lin_expression(arg2);
	  else if (Prolog_is_integer(arg2))
	    return build_lin_expression(arg1) * integer_term_to_Integer(arg2);
      }
    }
  }
  // Invalid.
  throw non_linear("build_lin_expression", t);
}


static PPL::Constraint
build_constraint(Prolog_term_ref t) {
  if (Prolog_is_compound(t)) {
    Prolog_atom functor;
    int arity;
    Prolog_get_compound_name_arity(t, &functor, &arity);
    if (arity == 2) {
      Prolog_term_ref arg1 = Prolog_new_term_ref();
      Prolog_term_ref arg2 = Prolog_new_term_ref();
      Prolog_get_arg(1, t, arg1);
      Prolog_get_arg(2, t, arg2);
      if (functor == a_equal)
	// =
	if (Prolog_is_integer(arg1))
	  return integer_term_to_Integer(arg1) == build_lin_expression(arg2);
	else if (Prolog_is_integer(arg2))
	  return build_lin_expression(arg1) == integer_term_to_Integer(arg2);
	else
	  return build_lin_expression(arg1) == build_lin_expression(arg2);
      else if (functor == a_equal_less_than)
	// =<
	if (Prolog_is_integer(arg1))
	  return integer_term_to_Integer(arg1) <= build_lin_expression(arg2);
	else if (Prolog_is_integer(arg2))
	  return build_lin_expression(arg1) <= integer_term_to_Integer(arg2);
	else
	  return build_lin_expression(arg1) <= build_lin_expression(arg2);
      else if (functor == a_greater_than_equal)
	// >=
	if (Prolog_is_integer(arg1))
	  return integer_term_to_Integer(arg1) >= build_lin_expression(arg2);
	else if (Prolog_is_integer(arg2))
	  return build_lin_expression(arg1) >= integer_term_to_Integer(arg2);
	else
	  return build_lin_expression(arg1) >= build_lin_expression(arg2);
      else if (functor == a_less_than)
	// <
	if (Prolog_is_integer(arg1))
	  return integer_term_to_Integer(arg1) < build_lin_expression(arg2);
	else if (Prolog_is_integer(arg2))
	  return build_lin_expression(arg1) < integer_term_to_Integer(arg2);
	else
	  return build_lin_expression(arg1) < build_lin_expression(arg2);
      else if (functor == a_greater_than)
	// >
	if (Prolog_is_integer(arg1))
	  return integer_term_to_Integer(arg1) > build_lin_expression(arg2);
	else if (Prolog_is_integer(arg2))
	  return build_lin_expression(arg1) > integer_term_to_Integer(arg2);
	else
	  return build_lin_expression(arg1) > build_lin_expression(arg2);
    }
  }
  // Invalid.
  throw non_linear("build_constraint", t);
}

static PPL::Generator
build_generator(Prolog_term_ref t) {
  if (Prolog_is_compound(t)) {
    Prolog_atom functor;
    int arity;
    Prolog_get_compound_name_arity(t, &functor, &arity);
    if (arity == 1) {
      Prolog_term_ref arg = Prolog_new_term_ref();
      Prolog_get_arg(1, t, arg);
      if (functor == a_line)
	return PPL::Generator::line(build_lin_expression(arg));
      else if (functor == a_ray)
	return PPL::Generator::ray(build_lin_expression(arg));
      else if (functor == a_point)
	return PPL::Generator::point(build_lin_expression(arg));
      else if (functor == a_closure_point)
	return PPL::Generator::closure_point(build_lin_expression(arg));
    }
    else if (arity == 2) {
      Prolog_term_ref arg1 = Prolog_new_term_ref();
      Prolog_term_ref arg2 = Prolog_new_term_ref();
      Prolog_get_arg(1, t, arg1);
      Prolog_get_arg(2, t, arg2);
      if (Prolog_is_integer(arg2)) {
        if (functor == a_point)
	  return PPL::Generator::point(build_lin_expression(arg1),
				       integer_term_to_Integer(arg2));
        else if (functor == a_closure_point)
	  return PPL::Generator::closure_point(build_lin_expression(arg1),
					       integer_term_to_Integer(arg2));
      }
    }
  }
  // Invalid.
  throw non_linear("build_generator", t);
}

template <typename R>
static Prolog_term_ref
get_lin_expression(const R& r) {
  Prolog_term_ref so_far = Prolog_new_term_ref();
  PPL::Integer coefficient;
  PPL::dimension_type varid = 0;
  PPL::dimension_type space_dimension = r.space_dimension();
  while (varid < space_dimension
	 && (coefficient = r.coefficient(PPL::Variable(varid))) == 0)
    ++varid;
  if (varid >= space_dimension) {
    Prolog_put_long(so_far, 0);
  }
  else {
    Prolog_construct_compound(so_far, a_asterisk,
			      Integer_to_integer_term(coefficient),
			      variable_term(varid));
    while (true) {
      ++varid;
      while (varid < space_dimension
	     && (coefficient = r.coefficient(PPL::Variable(varid))) == 0)
	++varid;
      if (varid >= space_dimension)
	break;
      else {
	Prolog_term_ref addendum = Prolog_new_term_ref();
	Prolog_construct_compound(addendum, a_asterisk,
				  Integer_to_integer_term(coefficient),
				  variable_term(varid));
	Prolog_term_ref new_so_far = Prolog_new_term_ref();
	Prolog_construct_compound(new_so_far, a_plus,
				  so_far, addendum);
	so_far = new_so_far;
      }
    }
  }
  return so_far;
}

static Prolog_term_ref
constraint_term(const PPL::Constraint& c) {
  Prolog_atom relation = 0;
  switch (c.type()) {
    case PPL::Constraint::EQUALITY:
      relation = a_equal;
      break;
    case PPL::Constraint::NONSTRICT_INEQUALITY:
      relation = a_greater_than_equal;
      break;
    case PPL::Constraint::STRICT_INEQUALITY:
      relation = a_greater_than;
      break;
  default:
    throw_unknown_interface_error("generator_term()");
  }
  Prolog_term_ref t = Prolog_new_term_ref();
  Prolog_construct_compound(t, relation,
			    get_lin_expression(c),
			    Integer_to_integer_term(-c.inhomogeneous_term()));
  return t;
}

static Prolog_term_ref
generator_term(const PPL::Generator& g) {
  Prolog_term_ref t = Prolog_new_term_ref();
  Prolog_atom constructor = 0;
  switch (g.type()) {
  case PPL::Generator::LINE:
    constructor = a_line;
    break;
  case PPL::Generator::RAY:
    constructor = a_ray;
    break;
  case PPL::Generator::POINT:
    {
      constructor = a_point;
      const PPL::Integer& divisor = g.divisor();
      if (divisor == 1)
	break;
      else {
	Prolog_construct_compound(t, constructor,
				  get_lin_expression(g),
				  Integer_to_integer_term(divisor));
	return t;
      }
    }
  case PPL::Generator::CLOSURE_POINT:
    {
      constructor = a_closure_point;
      const PPL::Integer& divisor = g.divisor();
      if (divisor == 1)
	break;
      else {
	Prolog_construct_compound(t, constructor,
				  get_lin_expression(g),
				  Integer_to_integer_term(divisor));
	return t;
      }
    }
  default:
    throw_unknown_interface_error("generator_term()");
  }
  Prolog_construct_compound(t, constructor, get_lin_expression(g));
  return t;
}

static PPL::Variable
get_variable(Prolog_term_ref t) {
  if (Prolog_is_compound(t)) {
    Prolog_atom functor;
    int arity;
    Prolog_get_compound_name_arity(t, &functor, &arity);
    if (functor == a_dollar_VAR && arity == 1) {
      Prolog_term_ref arg = Prolog_new_term_ref();
      Prolog_get_arg(1, t, arg);
      return PPL::Variable(term_to_unsigned_int(arg));
    }
  }
  throw not_a_variable(t);
}

static PPL::Polyhedron*
term_to_polyhedron_handle(Prolog_term_ref t_ph) {
  if (Prolog_is_address(t_ph)) {
    void* p;
    if (Prolog_get_address(t_ph, &p))
      return static_cast<PPL::Polyhedron*>(p);
  }
  throw not_a_polyhedron_handle(t_ph);
}

static bool Prolog_interface_initialized = false;

extern "C" Prolog_foreign_return_type
ppl_initialize() {
  try {
    if (Prolog_interface_initialized)
      return PROLOG_SUCCESS;
    for (size_t
	   i = sizeof(prolog_atoms)/sizeof(prolog_atoms[0]); i-- > 0; ) {
      Prolog_atom a = Prolog_atom_from_string(prolog_atoms[i].name);
      *prolog_atoms[i].p_atom = a;
    }
    timeout_exception_atom = a_time_out;
    ppl_Prolog_sysdep_init();
    Prolog_interface_initialized = true;
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_finalize() {
  try {
    if (!Prolog_interface_initialized)
      return PROLOG_SUCCESS;

    Prolog_interface_initialized = false;
    // Release the pending timeout object, if any.
    reset_timeout();
    ppl_Prolog_sysdep_deinit();
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_set_timeout_exception_atom(Prolog_term_ref t_tea) {
  try {
    if (Prolog_is_atom(t_tea)) {
      Prolog_atom tea;
      if (Prolog_get_atom_name(t_tea, &tea)) {
	timeout_exception_atom = tea;
	return PROLOG_SUCCESS;
      }
    }
    Prolog_term_ref culprit = Prolog_new_term_ref();
    Prolog_term_ref arg_no = Prolog_new_term_ref();
    Prolog_term_ref expected_domain = Prolog_new_term_ref();
    Prolog_term_ref et = Prolog_new_term_ref();

    Prolog_put_term(culprit, t_tea);
    Prolog_put_long(arg_no, 1);
    Prolog_put_atom_chars(expected_domain, "atom");
    Prolog_construct_compound(et,
			      Prolog_atom_from_string("ppl_set_timeout_exception_atom"),
			      culprit);
    Prolog_construct_compound(et, Prolog_atom_from_string("domain_error"),
			      et, arg_no, expected_domain, culprit);
    Prolog_raise_exception(et);
    return PROLOG_FAILURE;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_timeout_exception_atom(Prolog_term_ref t) {
  try {
    Prolog_term_ref t_tea = Prolog_new_term_ref();
    Prolog_put_atom(t_tea, timeout_exception_atom);
    return Prolog_unify(t_tea, t) ? PROLOG_SUCCESS : PROLOG_FAILURE;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_set_timeout(Prolog_term_ref t_time) {
  try {
    // In case a timeout was already set.
    reset_timeout();
    static timeout_exception e;
    unsigned hundredth_secs = term_to_unsigned_int(t_time);
    p_timeout_object =
      new
      Parma_Watchdog_Library::Watchdog(hundredth_secs,
				       &PPL::abandon_exponential_computations,
				       e);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_reset_timeout() {
  try {
    reset_timeout();
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_new_Polyhedron_from_dimension(Prolog_term_ref t_tp,
				  Prolog_term_ref t_nd,
				  Prolog_term_ref t_ph) {
  try {
    PPL::Polyhedron* ph;
    Prolog_atom tp = term_to_polyhedron_kind(t_tp);
    if (tp == a_c)
      ph = new PPL::C_Polyhedron(term_to_unsigned_int(t_nd));
    else
      ph = new PPL::NNC_Polyhedron(term_to_unsigned_int(t_nd));
    Prolog_term_ref tmp = Prolog_new_term_ref();
    Prolog_put_address(tmp, ph);
    if (Prolog_unify(t_ph, tmp)) {
      REGISTER(ph);
      return PROLOG_SUCCESS;
    }
    else
      delete ph;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_new_Polyhedron_empty_from_dimension(Prolog_term_ref t_tp,
                                        Prolog_term_ref t_nd,
					Prolog_term_ref t_ph) {
  try {
    PPL::Polyhedron* ph;
    Prolog_atom tp = term_to_polyhedron_kind(t_tp);
    if (tp == a_c)
      ph = new PPL::C_Polyhedron(term_to_unsigned_int(t_nd),
				 PPL::Polyhedron::EMPTY);
    else
      ph = new PPL::NNC_Polyhedron(term_to_unsigned_int(t_nd),
				   PPL::Polyhedron::EMPTY);
    Prolog_term_ref tmp = Prolog_new_term_ref();
    Prolog_put_address(tmp, ph);
    if (Prolog_unify(t_ph, tmp)) {
      REGISTER(ph);
      return PROLOG_SUCCESS;
    }
    else
      delete ph;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_new_Polyhedron_from_Polyhedron(Prolog_term_ref t_tp_source,
				   Prolog_term_ref t_ph_source,
				   Prolog_term_ref t_tp,
				   Prolog_term_ref t_ph) {
  try {
    PPL::Polyhedron* ph;
    Prolog_atom tp_source = term_to_polyhedron_kind(t_tp_source);
    if (tp_source == a_c) {
      const PPL::C_Polyhedron* ph_source
	= static_cast<const PPL::C_Polyhedron*>
	(term_to_polyhedron_handle(t_ph_source));
      CHECK(ph_source);
      Prolog_atom tp = term_to_polyhedron_kind(t_tp);
      if (tp == a_c)
        ph = new PPL::C_Polyhedron(*ph_source);
      else
	ph = new PPL::NNC_Polyhedron(*ph_source);
    }
    else {
      const PPL::NNC_Polyhedron* ph_source
        = static_cast<const PPL::NNC_Polyhedron*>
	(term_to_polyhedron_handle(t_ph_source));
      CHECK(ph_source);
      Prolog_atom tp = term_to_polyhedron_kind(t_tp);
      if (tp == a_c)
        ph = new PPL::C_Polyhedron(*ph_source);
      else
	ph = new PPL::NNC_Polyhedron(*ph_source);
    }
    Prolog_term_ref tmp = Prolog_new_term_ref();
    Prolog_put_address(tmp, ph);
    if (Prolog_unify(t_ph, tmp)) {
      REGISTER(ph);
      return PROLOG_SUCCESS;
    }
    else
      delete ph;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_new_Polyhedron_from_constraints(Prolog_term_ref t_tp,
				    Prolog_term_ref t_clist,
				    Prolog_term_ref t_ph) {
  try {
    PPL::ConSys cs;
    Prolog_term_ref c = Prolog_new_term_ref();

    while (Prolog_is_cons(t_clist)) {
      Prolog_get_cons(t_clist, c, t_clist);
      cs.insert(build_constraint(c));
    }
    PPL::Polyhedron* ph;
    Prolog_atom tp = term_to_polyhedron_kind(t_tp);
    if (tp == a_c)
      ph = new PPL::C_Polyhedron(cs);
    else
      ph = new PPL::NNC_Polyhedron(cs);
    Prolog_term_ref tmp = Prolog_new_term_ref();
    Prolog_put_address(tmp, ph);
    if (Prolog_unify(t_ph, tmp)) {
      REGISTER(ph);
      return PROLOG_SUCCESS;
    }
    else
      delete ph;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_new_Polyhedron_from_generators(Prolog_term_ref t_tp,
				   Prolog_term_ref t_glist,
				   Prolog_term_ref t_ph) {
  try {
    PPL::GenSys gs;
    Prolog_term_ref g = Prolog_new_term_ref();

    while (Prolog_is_cons(t_glist)) {
      Prolog_get_cons(t_glist, g, t_glist);
      gs.insert(build_generator(g));
    }
    PPL::Polyhedron* ph;
    Prolog_atom tp = term_to_polyhedron_kind(t_tp);
    if (tp == a_c)
      ph = new PPL::C_Polyhedron(gs);
    else
      ph = new PPL::NNC_Polyhedron(gs);
    Prolog_term_ref tmp = Prolog_new_term_ref();
    Prolog_put_address(tmp, ph);
    if (Prolog_unify(t_ph, tmp)) {
      REGISTER(ph);
      return PROLOG_SUCCESS;
    }
    else
      delete ph;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

enum Boundary_Kind {
  LOWER,
  UPPER
};

static bool
term_to_boundary(Prolog_term_ref t_b, Boundary_Kind kind,
		 bool& finite, bool& closed,
		 PPL::Integer& n, PPL::Integer& d) {
  if (!Prolog_is_compound(t_b))
    return false;

  Prolog_atom functor;
  int arity;

  Prolog_get_compound_name_arity(t_b, &functor, &arity);
  // A boundary term is either of the form c(Limit) or o(Limit).
  if (arity != 1 || (functor != a_c && functor != a_o))
    return false;

  Prolog_atom open_closed_atom = functor;

  Prolog_term_ref t_limit = Prolog_new_term_ref();
  Prolog_get_arg(1, t_b, t_limit);
  if (Prolog_is_integer(t_limit)) {
    // A finite, integral limit.
    finite = true;
    closed = (open_closed_atom == a_c);
    n = integer_term_to_Integer(t_limit);
    d = 1;
  }
  else if (Prolog_is_atom(t_limit)) {
    Prolog_atom a;
    Prolog_get_atom_name(t_limit, &a);
    Prolog_atom allowed_infinity = (kind == LOWER ? a_minf : a_pinf);
    // Only open bounds may be unbounded.
    if (a != allowed_infinity || open_closed_atom != a_o)
      return false;

    finite = false;
  }
  else if (Prolog_is_compound(t_limit)) {
    Prolog_get_compound_name_arity(t_limit, &functor, &arity);
    if (arity != 2 || functor != a_slash)
      return false;

    Prolog_term_ref t_n = Prolog_new_term_ref();
    Prolog_term_ref t_d = Prolog_new_term_ref();
    Prolog_get_arg(1, t_limit, t_n);
    Prolog_get_arg(2, t_limit, t_d);

    if (!Prolog_is_integer(t_n) || !Prolog_is_integer(t_d))
      return false;
    else {
      finite = true;
      closed = (open_closed_atom == a_c);
      n = integer_term_to_Integer(t_n);
      d = integer_term_to_Integer(t_d);
      // Catch negative denominators and divisions by zero here.
      if (d <= 0)
        return false;
    }
  }
  return true;
}

extern "C" Prolog_foreign_return_type
ppl_new_Polyhedron_from_bounding_box(Prolog_term_ref t_tp,
				     Prolog_term_ref t_bb,
				     Prolog_term_ref t_ph) {
  try {
    // Compute the space dimension.
    Prolog_term_ref t_l = Prolog_new_term_ref();
    Prolog_term_ref t_interval = Prolog_new_term_ref();
    Prolog_put_term(t_l, t_bb);
    PPL::dimension_type dimension;
    for (dimension = 0; Prolog_is_cons(t_l); ++dimension)
      Prolog_get_cons(t_l, t_interval, t_l);
    // Check whether the list is properly terminated.
    if (!Prolog_is_atom(t_l))
      goto fail;
    else {
      Prolog_atom a;
      Prolog_get_atom_name(t_l, &a);
      if (a != a_nil)
        goto fail;
    }

    PPL::BoundingBox bbox(dimension);
    // Set bbox to reflect its Prolog representation.
    for (PPL::dimension_type i = 0; i < dimension; ++i) {
      Prolog_get_cons(t_bb, t_interval, t_bb);
      // An interval is of the form i(Lower_Bound, Upper_Bound).
      if (!Prolog_is_compound(t_interval))
	goto fail;
      Prolog_atom functor;
      int arity;
      Prolog_get_compound_name_arity(t_interval, &functor, &arity);
      if (arity != 2 || functor != a_i)
	goto fail;

      bool finite;
      bool closed;
      PPL::Integer n;
      PPL::Integer d;
      Prolog_term_ref t_bound = Prolog_new_term_ref();

      // Get and raise the lower bound.
      Prolog_get_arg(1, t_interval, t_bound);
      if (!term_to_boundary(t_bound, LOWER, finite, closed, n, d))
	goto fail;
      if (finite)
	bbox.raise_lower_bound(i, closed, n, d);

      // Get and lower the upper bound.
      Prolog_get_arg(2, t_interval, t_bound);
      if (!term_to_boundary(t_bound, UPPER, finite, closed, n, d))
	goto fail;
      if (finite)
	bbox.lower_upper_bound(i, closed, n, d);
    }

    PPL::Polyhedron* ph;
    Prolog_atom tp = term_to_polyhedron_kind(t_tp);
    if (tp == a_c)
      ph = new PPL::C_Polyhedron(bbox, PPL::From_Bounding_Box());
    else
      ph = new PPL::NNC_Polyhedron(bbox, PPL::From_Bounding_Box());
    Prolog_term_ref tmp = Prolog_new_term_ref();
    Prolog_put_address(tmp, ph);
    if (Prolog_unify(t_ph, tmp)) {
      REGISTER(ph);
      return PROLOG_SUCCESS;
    }
    else
      delete ph;
  }
  CATCH_ALL;

 fail:
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_delete_Polyhedron(Prolog_term_ref t_ph) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    UNREGISTER(ph);
    delete ph;
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_swap(Prolog_term_ref t_lhs, Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    lhs->swap(*rhs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_space_dimension(Prolog_term_ref t_ph, Prolog_term_ref t_sd) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::dimension_type sd = ph->space_dimension();
    Prolog_term_ref tmp = Prolog_new_term_ref();
    if (sd <= LONG_MAX
	&& Prolog_put_long(tmp, long(sd))
	&& Prolog_unify(t_sd, tmp))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_intersection_assign(Prolog_term_ref t_lhs,
				   Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    lhs->intersection_assign(*rhs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_concatenate_assign(Prolog_term_ref t_lhs,
				  Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    lhs->concatenate_assign(*rhs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_intersection_assign_and_minimize(Prolog_term_ref t_lhs,
						Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.intersection_assign_and_minimize(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_poly_hull_assign(Prolog_term_ref t_lhs,
				Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.poly_hull_assign(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_poly_hull_assign_and_minimize(Prolog_term_ref t_lhs,
					     Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.poly_hull_assign_and_minimize(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_poly_difference_assign(Prolog_term_ref t_lhs,
				      Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.poly_difference_assign(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_poly_difference_assign_and_minimize(Prolog_term_ref t_lhs,
						   Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.poly_difference_assign_and_minimize(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_BHRZ03_widening_assign(Prolog_term_ref t_lhs,
				      Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.BHRZ03_widening_assign(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_limited_BHRZ03_extrapolation_assign(Prolog_term_ref t_lhs,
						   Prolog_term_ref t_rhs,
						   Prolog_term_ref t_clist) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::ConSys cs;
    Prolog_term_ref c = Prolog_new_term_ref();

    while (Prolog_is_cons(t_clist)) {
      Prolog_get_cons(t_clist, c, t_clist);
      cs.insert(build_constraint(c));
    }
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.limited_BHRZ03_extrapolation_assign(y, cs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_H79_widening_assign(Prolog_term_ref t_lhs,
				   Prolog_term_ref t_rhs) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.H79_widening_assign(y);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_limited_H79_extrapolation_assign(Prolog_term_ref t_lhs,
						Prolog_term_ref t_rhs,
						Prolog_term_ref t_clist) {
  try {
    PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    PPL::ConSys cs;
    Prolog_term_ref c = Prolog_new_term_ref();

    while (Prolog_is_cons(t_clist)) {
      Prolog_get_cons(t_clist, c, t_clist);
      cs.insert(build_constraint(c));
    }
    PPL::Polyhedron& x = *static_cast<PPL::Polyhedron*>(lhs);
    const PPL::Polyhedron& y = *static_cast<const PPL::Polyhedron*>(rhs);
    x.limited_H79_extrapolation_assign(y, cs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_topological_closure_assign(Prolog_term_ref t_ph) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    ph->topological_closure_assign();
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_get_constraints(Prolog_term_ref t_ph,
			       Prolog_term_ref t_clist) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);

    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    const PPL::ConSys& cs = ph->constraints();
    for (PPL::ConSys::const_iterator i = cs.begin(),
	   cs_end = cs.end(); i != cs_end; ++i)
      Prolog_construct_cons(tail, constraint_term(*i), tail);

    if (Prolog_unify(t_clist, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_get_minimized_constraints(Prolog_term_ref t_ph,
					 Prolog_term_ref t_clist) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);

    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    const PPL::ConSys& cs = ph->minimized_constraints();
    for (PPL::ConSys::const_iterator i = cs.begin(),
	   cs_end = cs.end(); i != cs_end; ++i)
      Prolog_construct_cons(tail, constraint_term(*i), tail);

    if (Prolog_unify(t_clist, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_get_generators(Prolog_term_ref t_ph,
			      Prolog_term_ref t_glist) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);

    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    const PPL::GenSys& gs = ph->generators();
    for (PPL::GenSys::const_iterator i = gs.begin(),
	   gs_end = gs.end(); i != gs_end; ++i)
      Prolog_construct_cons(tail, generator_term(*i), tail);

    if (Prolog_unify(t_glist, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_get_minimized_generators(Prolog_term_ref t_ph,
					Prolog_term_ref t_glist) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);

    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    const PPL::GenSys& gs = ph->minimized_generators();
    for (PPL::GenSys::const_iterator i = gs.begin(),
	   gs_end = gs.end(); i != gs_end; ++i)
      Prolog_construct_cons(tail, generator_term(*i), tail);

    if (Prolog_unify(t_glist, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_constraint(Prolog_term_ref t_ph, Prolog_term_ref t_c) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    ph->add_constraint(build_constraint(t_c));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_constraint_and_minimize(Prolog_term_ref t_ph,
					   Prolog_term_ref t_c) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    if (ph->add_constraint_and_minimize(build_constraint(t_c)))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_generator(Prolog_term_ref t_ph, Prolog_term_ref t_g) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    ph->add_generator(build_generator(t_g));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_generator_and_minimize(Prolog_term_ref t_ph,
					  Prolog_term_ref t_g) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    if (ph->add_generator_and_minimize(build_generator(t_g)))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_constraints(Prolog_term_ref t_ph,
			       Prolog_term_ref t_clist) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::ConSys cs;
    Prolog_term_ref c = Prolog_new_term_ref();

    while (Prolog_is_cons(t_clist)) {
      Prolog_get_cons(t_clist, c, t_clist);
      cs.insert(build_constraint(c));
    }

    ph->add_constraints(cs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_constraints_and_minimize(Prolog_term_ref t_ph,
					    Prolog_term_ref t_clist) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::ConSys cs;
    Prolog_term_ref c = Prolog_new_term_ref();

    while (Prolog_is_cons(t_clist)) {
      Prolog_get_cons(t_clist, c, t_clist);
      cs.insert(build_constraint(c));
    }

    if (ph->add_constraints_and_minimize(cs))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_generators(Prolog_term_ref t_ph,
			      Prolog_term_ref t_glist) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::GenSys gs;
    Prolog_term_ref g = Prolog_new_term_ref();

    while (Prolog_is_cons(t_glist)) {
      Prolog_get_cons(t_glist, g, t_glist);
      gs.insert(build_generator(g));
    }

    ph->add_generators(gs);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_generators_and_minimize(Prolog_term_ref t_ph,
					   Prolog_term_ref t_glist) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::GenSys gs;
    Prolog_term_ref g = Prolog_new_term_ref();

    while (Prolog_is_cons(t_glist)) {
      Prolog_get_cons(t_glist, g, t_glist);
      gs.insert(build_generator(g));
    }

    if (ph->add_generators_and_minimize(gs))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_dimensions_and_project(Prolog_term_ref t_ph,
					  Prolog_term_ref t_nnd) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    ph->add_dimensions_and_project(term_to_unsigned_int(t_nnd));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_add_dimensions_and_embed(Prolog_term_ref t_ph,
					Prolog_term_ref t_nnd) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    ph->add_dimensions_and_embed(term_to_unsigned_int(t_nnd));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_remove_dimensions(Prolog_term_ref t_ph,
				 Prolog_term_ref t_vlist) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::Variables_Set dead_variables;
    Prolog_term_ref v = Prolog_new_term_ref();
    while (Prolog_is_cons(t_vlist)) {
      Prolog_get_cons(t_vlist, v, t_vlist);
      dead_variables.insert(get_variable(v));
    }
    ph->remove_dimensions(dead_variables);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_remove_higher_dimensions(Prolog_term_ref t_ph,
					Prolog_term_ref t_nd) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    ph->remove_higher_dimensions(term_to_unsigned_int(t_nd));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

namespace {

class PIFunc {
private:
  PPL::dimension_type max_in_codomain_;
  std::vector<PPL::dimension_type> vec;

public:
  PIFunc()
    : max_in_codomain_(PPL::not_a_dimension()) {
  }

  bool has_empty_codomain() const {
    return vec.empty();
  }

  PPL::dimension_type max_in_codomain() const {
    return max_in_codomain_;
  }

  bool maps(PPL::dimension_type i, PPL::dimension_type& j) const {
    if (i >= vec.size())
      return false;
    PPL::dimension_type vec_i = vec[i];
    if (vec_i == PPL::not_a_dimension())
      return false;
    j = vec_i;
    return true;
  }

  bool insert(PPL::dimension_type i, PPL::dimension_type j) {
    if (max_in_codomain_ == PPL::not_a_dimension() || j > max_in_codomain_)
      max_in_codomain_ = j;
    if (i > vec.size())
      vec.insert(vec.end(), i - vec.size(), PPL::not_a_dimension());
    if (i == vec.size()) {
      vec.insert(vec.end(), j);
      return true;
    }
    PPL::dimension_type& vec_i = vec[i];
    if (vec_i != PPL::not_a_dimension())
      return false;
    vec_i = j;
    return true;
  }
};

} // namespace

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_shuffle_dimensions(Prolog_term_ref t_ph,
				  Prolog_term_ref t_pifunc) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    PPL::dimension_type space_dim = ph->space_dimension();
    CHECK(ph);
    PIFunc pifunc;
    Prolog_term_ref t_pair = Prolog_new_term_ref();
    while (Prolog_is_cons(t_pifunc)) {
      Prolog_get_cons(t_pifunc, t_pair, t_pifunc);
      Prolog_atom functor;
      int arity;
      Prolog_get_compound_name_arity(t_pair, &functor, &arity);
      if (arity != 2 || functor != a_minus)
	goto fail;
      Prolog_term_ref t_i = Prolog_new_term_ref();
      Prolog_term_ref t_j = Prolog_new_term_ref();
      Prolog_get_arg(1, t_pair, t_i);
      Prolog_get_arg(2, t_pair, t_j);
      PPL::dimension_type i = get_variable(t_i).id();
      PPL::dimension_type j = get_variable(t_j).id();
      if (i >= space_dim || !pifunc.insert(i, j))
	goto fail;
    }
    ph->shuffle_dimensions(pifunc);
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;

 fail:
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_affine_image(Prolog_term_ref t_ph, Prolog_term_ref t_v,
			    Prolog_term_ref t_le, Prolog_term_ref t_d) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::Variable var = get_variable(t_v);
    ph->affine_image(var,
                build_lin_expression(t_le),
                integer_term_to_Integer(t_d));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_affine_preimage(Prolog_term_ref t_ph, Prolog_term_ref t_v,
			       Prolog_term_ref t_le, Prolog_term_ref t_d) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::Variable var = get_variable(t_v);
    ph->affine_preimage(var,
                build_lin_expression(t_le),
                integer_term_to_Integer(t_d));
    return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_relation_with_constraint(Prolog_term_ref t_ph,
					Prolog_term_ref t_c,
					Prolog_term_ref t_r) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::Poly_Con_Relation r = ph->relation_with(build_constraint(t_c));

    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    Prolog_term_ref t_a = Prolog_new_term_ref();
    while (r != PPL::Poly_Con_Relation::nothing()) {
      if (r.implies(PPL::Poly_Con_Relation::is_disjoint())) {
	Prolog_put_atom(t_a, a_is_disjoint);
	r = r - PPL::Poly_Con_Relation::is_disjoint();
      }
      else if (r.implies(PPL::Poly_Con_Relation::strictly_intersects())) {
	Prolog_put_atom(t_a, a_strictly_intersects);
	r = r - PPL::Poly_Con_Relation::strictly_intersects();
      }
      else if (r.implies(PPL::Poly_Con_Relation::is_included())) {
	Prolog_put_atom(t_a, a_is_included);
	r = r - PPL::Poly_Con_Relation::is_included();
      }
      else if (r.implies(PPL::Poly_Con_Relation::saturates())) {
	Prolog_put_atom(t_a, a_saturates);
	r = r - PPL::Poly_Con_Relation::saturates();
      }
      Prolog_construct_cons(tail, t_a, tail);
    }
    if (Prolog_unify(t_r, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_relation_with_generator(Prolog_term_ref t_ph,
				       Prolog_term_ref t_g,
				       Prolog_term_ref t_r) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::Poly_Gen_Relation r = ph->relation_with(build_generator(t_g));

    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    Prolog_term_ref t_a = Prolog_new_term_ref();
    while (r != PPL::Poly_Gen_Relation::nothing()) {
      if (r.implies(PPL::Poly_Gen_Relation::subsumes())) {
	Prolog_put_atom(t_a, a_subsumes);
	r = r - PPL::Poly_Gen_Relation::subsumes();
      }
      Prolog_construct_cons(tail, t_a, tail);
    }
    if (Prolog_unify(t_r, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_check_empty(Prolog_term_ref t_ph) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    if (ph->check_empty())
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_check_universe(Prolog_term_ref t_ph) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    if (ph->check_universe())
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_is_bounded(Prolog_term_ref t_ph) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    if (ph->is_bounded())
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_bounds_from_above(Prolog_term_ref t_ph,
				 Prolog_term_ref t_expr) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::LinExpression l = build_lin_expression(t_expr);
    if (ph->bounds_from_above(l))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_bounds_from_below(Prolog_term_ref t_ph,
				 Prolog_term_ref t_expr) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    PPL::LinExpression l = build_lin_expression(t_expr);
    if (ph->bounds_from_below(l))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_is_topologically_closed(Prolog_term_ref t_ph) {
  try {
    const PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);
    if (ph->is_topologically_closed())
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_contains_Polyhedron(Prolog_term_ref t_lhs,
				   Prolog_term_ref t_rhs) {
  try {
    const PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    if (*lhs >= *rhs)
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_strictly_contains_Polyhedron(Prolog_term_ref t_lhs,
					    Prolog_term_ref t_rhs) {
  try {
    const PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    if (*lhs > *rhs)
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_is_disjoint_from_Polyhedron(Prolog_term_ref t_lhs,
				 Prolog_term_ref t_rhs) {
  try {
    const PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    if (are_disjoint(*lhs, *rhs))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_equals_Polyhedron(Prolog_term_ref t_lhs,
				 Prolog_term_ref t_rhs) {
  try {
    const PPL::Polyhedron* lhs = term_to_polyhedron_handle(t_lhs);
    const PPL::Polyhedron* rhs = term_to_polyhedron_handle(t_rhs);
    CHECK(lhs);
    CHECK(rhs);
    if (*lhs == *rhs)
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;
  return PROLOG_FAILURE;
}

static Prolog_term_ref
extended_rational_term(const PPL::ExtendedRational& e) {
  Prolog_term_ref t = Prolog_new_term_ref();
  int d = e.direction_of_infinity();
  if (d > 0)
    Prolog_put_atom(t, a_pinf);
  else if (d < 0)
    Prolog_put_atom(t, a_minf);
  else {
    const PPL::Integer& numerator = e.numerator();
    const PPL::Integer& denominator = e.denominator();
    if (denominator == 1)
      Prolog_put_term(t, Integer_to_integer_term(numerator));
    else
      Prolog_construct_compound(t, a_slash,
				Integer_to_integer_term(numerator),
				Integer_to_integer_term(denominator));
  }
  return t;
}

static Prolog_term_ref
interval_term(const PPL::Interval& i) {
  Prolog_term_ref t = Prolog_new_term_ref();
  if (i.is_empty())
    Prolog_put_atom(t, a_empty);
  else {
    // Lower bound.
    const PPL::LBoundary& l = i.lower_bound();
    Prolog_term_ref lt = Prolog_new_term_ref();
    if (l.is_closed())
      Prolog_construct_compound(lt, a_c, extended_rational_term(l.bound()));
    else
      Prolog_construct_compound(lt, a_o, extended_rational_term(l.bound()));

    // Upper bound.
    const PPL::UBoundary& u = i.upper_bound();
    Prolog_term_ref ut = Prolog_new_term_ref();
    if (u.is_closed())
      Prolog_construct_compound(ut, a_c, extended_rational_term(u.bound()));
    else
      Prolog_construct_compound(ut, a_o, extended_rational_term(u.bound()));

    Prolog_construct_compound(t, a_i, lt, ut);
  }
  return t;
}

static bool
term_to_complexity_class(Prolog_term_ref t, Prolog_atom& cc) {
  if (Prolog_is_atom(t)) {
    Prolog_atom name;
    if (Prolog_get_atom_name(t, &name)
	&& (name == a_polynomial || name == a_simplex || name == a_any)) {
      cc = name;
      return true;
    }
  }
  return false;
}

extern "C" Prolog_foreign_return_type
ppl_Polyhedron_get_bounding_box(Prolog_term_ref t_ph,
				Prolog_term_ref t_cc,
				Prolog_term_ref t_bb) {
  try {
    PPL::Polyhedron* ph = term_to_polyhedron_handle(t_ph);
    CHECK(ph);

    Prolog_atom p_cc;
    if (!term_to_complexity_class(t_cc, p_cc)) {
      goto fail;
    }
    PPL::Complexity_Class cc;
    if (p_cc == a_polynomial)
      cc = PPL::POLYNOMIAL;
    else if (p_cc == a_simplex)
      cc = PPL::SIMPLEX;
    else
      cc = PPL::ANY;

    PPL::dimension_type dimension = ph->space_dimension();
    PPL::BoundingBox bbox(dimension);
    ph->shrink_bounding_box(bbox, cc);
    Prolog_term_ref tail = Prolog_new_term_ref();
    Prolog_put_atom(tail, a_nil);
    for (PPL::dimension_type i = dimension; i-- > 0; )
      Prolog_construct_cons(tail, interval_term(bbox[i]), tail);
    if (Prolog_unify(t_bb, tail))
      return PROLOG_SUCCESS;
  }
  CATCH_ALL;

 fail:
  return PROLOG_FAILURE;
}
