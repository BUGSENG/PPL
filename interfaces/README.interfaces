Copyright (C) 2001-2008 Roberto Bagnara <bagnara@cs.unipr.it>
See below for the copying conditions.

DRAFT NOTES FOR THE INTERFACES
==============================

This file describes specific requirements for generating the Prolog
and other non-C++ interfaces when domains other than "C_Polyhedron"
and "NNC_Polyhedron" are required.

Configuring for the interfaces
------------------------------

How to configure, compile and install the PPL is described in the
README.configure and INSTALL files. This includes information about
how to customize the non-C++ interfaces for the user's choice of domains
using the configure option "--instantiations=DOMAINS"
where DOMAINS is an "@" separated list.

At the time of writing, the domains that can be included as instantiations
and have been tested are the following:

Polyhedron
Grid
BD_Shape<I>
Octagonal_Shape<I>
            where "I" can be "signed char", "long", "long long",
            "int", "short", "mpz_class" or "mpq_class"
Pointset_Powerset<C_Polyhedron>
Pointset_Powerset<NNC_Polyhedron>

Other combinations for the powerset domain may work, but these are
currently untested.

The interface class names
-------------------------

The interface names for the class are generated automatically without
the "<" or ">" but bracketed argument is separated from the rest of
the name by an "_".  The names can be examined and the interface names
changed in the generated file
<build-directory>/interfaces/ppl_interface_instantiations.m4

For instance
  $ ./configure --instantiations="Polyhedron@Pointset_Powerset<C_Polyhedron>"
will create this file with:

m4_define(`m4_interface_classes_names', `Polyhedron@Pointset_Powerset_C_Polyhedr
on')
m4_define(`m4_cplusplus_classes_names', `Polyhedron@Pointset_Powerset<C_Polyhedr
on>')

You can edit the interface names (but not the C++ names) provided each
name is distinct and conforms to usual coding conventions such as for
a Prolog atom.  Thus this file could have the Pointset_Powerset domain
name simplified as follows:

m4_define(`m4_interface_classes_names', `Polyhedron@PPS_C_Poly')
m4_define(`m4_cplusplus_classes_names', `Polyhedron@Pointset_Powerset<C_Polyhedr
on>')

For Prolog users: the available PPL predicates
----------------------------------------------

Each domain "CLASS" has a complete set of PPL predicates
corresponding to each method "METHOD" in the C++ interface.

In general the names are constructed as: "ppl_CLASS_METHOD".
The arguments are those of the C++ method but with the handle for the
domain element that the method applies to, as the first argument.

When building a new element of a domain CLASS using some constructor
CONSTRUCT, then it has the structure "ppl_new_CLASS_CONSTRUCT".
As before, the arguments are those of the C++ method but with the
handle for the domain element that the method builds, as the last
argument.

When deleting an element, then it has the form "ppl_delete_CLASS/1",
the one argument being the handle for the element being deleted.

For many Prolog systems such as Ciao, the list of Prolog PPL
predicates can be viewed in one of the generated files. For instance,
in Ciao Prolog, the
<build-directory>/interfaces/Prolog/Ciao/ciao_predicate_check.pl includes a
list of all the generated predicates.

Checking the generated Prolog code
----------------------------------

For all the interfaces, the basic checks for the Polyhedron domains
can be done by running "make check" in the appropriate
build directories.

In addition, for the Ciao, SWI, SICStus and XSB Prolog systems, all
the generated code can be checked by running "make
predicate_check_test" in the corresponding build directories.

--------

Copyright (C) 2001-2008 Roberto Bagnara <bagnara@cs.unipr.it>

This file is part of the Parma Polyhedra Library (PPL).

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
The license is included, in various formats, in the `doc' subdirectory
of each distribution of the PPL in files called `fdl.*'.

The PPL is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.  The license is included, in various
formats, in the `doc' subdirectory of each distribution of the PPL in
files are called `gpl.*'.

The PPL is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

If you have not received a copy of one or both the above mentioned
licenses along with the PPL, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02111-1307, USA.

For the most up-to-date information see the Parma Polyhedra Library
site: http://www.cs.unipr.it/ppl/ .
