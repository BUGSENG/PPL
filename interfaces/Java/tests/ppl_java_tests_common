
    // Common stuff. We can add other objects if we need them later.
    Coefficient coeff_0;
    Coefficient coeff_5;
    Variable var_C;
    Variables_Set var_set_A;
    Linear_Expression le_A;

    Constraint constraint1;
    Constraint constraint2;
    Congruence congruence1;
    Generator generator1;
    Grid_Generator grid_generator1;

    Constraint_System constraints1;
    Constraint_System constraints2;
    Congruence_System congruences1;
    Generator_System generators1;
    Grid_Generator_System grid_generators1;

    By_Reference<Boolean> bool_by_ref1;
    By_Reference<Boolean> bool_by_ref2;
    By_Reference<Integer> int_by_ref1;
    By_Reference<Integer> zero_by_ref1;

    // Common initialization.
    public void initialize() {
	// Coefficient declaration.
	coeff_0 = new Coefficient("0");
        Coefficient coeff_1 = new Coefficient(1);
        Coefficient coeff_2 = new Coefficient(2);
        Coefficient coeff_3 = new Coefficient(3);
        Coefficient coeff_4 = new Coefficient(4);
	coeff_5 = new Coefficient("5");
        Coefficient coeff_10 = new Coefficient("10");

	// Variable declarations.
	Variable A = new Variable(0);
	Variable C = new Variable(2);
	var_C = C;
        var_set_A = new Variables_Set();
        var_set_A.add(A);

	// Linear_Expression declarations.
	Linear_Expression le_0 = new Linear_Expression_Coefficient(coeff_0);
	Linear_Expression le_5 = new Linear_Expression_Coefficient(coeff_5);
	le_A = new Linear_Expression_Variable(A);
	Linear_Expression le_2A = le_A.times(coeff_2);
	Linear_Expression le_C = new Linear_Expression_Variable(C);
	Linear_Expression le_2A_plus_C = le_2A.sum(le_C);
	Linear_Expression le_30A_plus_10C = le_2A_plus_C.times(coeff_10);

	System.out.print("Printing a linear expression (2A + C): ");
        System.out.println(le_2A_plus_C.toString());

	// Constraint declarations.
	Constraint c_5_geq_0
          = new Constraint(le_5, Relation_Symbol.GREATER_OR_EQUAL, le_0);
	constraint1 = c_5_geq_0;
	Constraint c_C_eq_5
          = new Constraint(le_C, Relation_Symbol.EQUAL, le_5);
	Constraint c_2A_eq_5
          = new Constraint(le_2A, Relation_Symbol.EQUAL, le_5);
	Constraint c_2A_plus_C_eq_2A
          = new Constraint(le_2A_plus_C, Relation_Symbol.EQUAL, le_2A);
	Constraint c_2A_plus_C_geq_5
          = new Constraint(le_2A_plus_C,
		           Relation_Symbol.GREATER_OR_EQUAL,
			   le_5);
	System.out.print("Printing a constraint (2A + C >= 5): ");
	System.out.println(c_2A_plus_C_geq_5.toString());

	Congruence cg_2A_eq_5 = new Congruence(le_2A, le_5, coeff_0);
	Congruence cg_C_eq_5 = new Congruence(le_C, le_5, coeff_0);
	congruence1 = cg_2A_eq_5;
	System.out.print("Printing a congruence (2A == 5): ");
        System.out.println(cg_2A_eq_5.toString());

	// Constraint_System declarations.
	constraints1 = new Constraint_System();
	constraints1.add(c_5_geq_0);
	constraints1.add(c_C_eq_5);
	System.out.print("Printing a constraint system (C == 5):");
	System.out.println(constraints1.toString());

	constraints2 = new Constraint_System();
	constraints2.add(c_2A_plus_C_eq_2A);
	constraints2.add(c_2A_eq_5);

	congruences1 = new Congruence_System();
	congruences1.add(cg_2A_eq_5);
	congruences1.add(cg_C_eq_5);
	congruences1.add(cg_2A_eq_5);
	System.out.println("Printing a congruence system: ");
	System.out.println(congruences1.toString());

	// Generator declarations.
	Generator g1 = Generator.point(le_30A_plus_10C, coeff_1);
	generator1 = g1;
	Generator g2 = Generator.point(le_30A_plus_10C, coeff_2);
        Generator g3 = Generator.point(le_30A_plus_10C, coeff_3);
	Generator g4 = Generator.point(le_A, coeff_4);
	System.out.println("Printing a generator (p(30A + 10C)):");
	System.out.println(g1.toString());

        // Generator_System declaration.
        generators1 = new Generator_System();
        generators1.add(g1);
        generators1.add(g2);
        generators1.add(g3);
        generators1.add(g4);
	System.out.println("Printing a generator system: ");
	System.out.println(generators1.toString());

	// Grid_Generator declarations.
	Grid_Generator gg1
          = Grid_Generator.grid_point(le_30A_plus_10C, coeff_1);
	grid_generator1 = gg1;
	Grid_Generator gg2
          = Grid_Generator.grid_point(le_30A_plus_10C, coeff_2);
        Grid_Generator gg3
          = Grid_Generator.grid_point(le_30A_plus_10C, coeff_3);
	Grid_Generator gg4
          = Grid_Generator.grid_point(le_A, coeff_4);

	// Grid_Generator_System declaration.
	grid_generators1 = new Grid_Generator_System();
	grid_generators1.add(gg1);
	grid_generators1.add(gg2);
	grid_generators1.add(gg3);
	grid_generators1.add(gg4);

        bool_by_ref1 = new By_Reference<Boolean>(true);
        bool_by_ref2 = new By_Reference<Boolean>(true);

        int_by_ref1 = new By_Reference<Integer>(1);
        zero_by_ref1 = new By_Reference<Integer>(0);
}
